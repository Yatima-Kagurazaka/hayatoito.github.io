<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>hayato.io</title><link href="https://hayato.io/" rel="alternate"></link><link href="https://hayato.io/feeds/all.atom.xml" rel="self"></link><id>https://hayato.io/</id><updated>2017-08-31T00:00:00+09:00</updated><entry><title>Rustが最強のプログラミング言語である証明</title><link href="https://hayato.io/2017/icfp-rust/" rel="alternate"></link><published>2017-08-31T00:00:00+09:00</published><updated>2017-08-31T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2017-08-31:/2017/icfp-rust/</id><summary type="html">&lt;p&gt;2017年現在、Rustが最強のプログラミング言語である証明を以下に示します。&lt;/p&gt;
&lt;h1 id="icfp"&gt;ICFP プログラミングコンテスト&lt;/h1&gt;
&lt;p&gt;ICFP プログラミングコンテストの説明については以下をご覧ください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ICFP Programming Contest は「なんでもあり」が特徴の，他とは一線を画す特徴的なプログラミングコンテストです．ACM の関数型プログラミング言語の学会 ICFP (International Conference on Functional Programming) に伴って毎年開催されていまして (1) プログラミング言語自由 (2) 計算資源自由 (2) チーム人数制限なし (3) 72 時間勝負 (4) 問題の形式も毎年大きく変化，等の特徴があります．優勝者は「その年のプログラミング言語」を決めることとなっており「その年はその言語の文句は言えない」とか．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='text-right'&gt;
引用元: &lt;a href=http://iwiwi.hatenablog.com/entry/20130927/1380255924&gt;http://iwiwi.hatenablog.com/entry/20130927/1380255924&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;コンテスト優勝チームが使用した言語は「優秀なハッカーに選ばれたプログラミング言語」として正式に認定されます …&lt;/p&gt;</summary><content type="html">&lt;p&gt;2017年現在、Rustが最強のプログラミング言語である証明を以下に示します。&lt;/p&gt;
&lt;h1 id="icfp"&gt;ICFP プログラミングコンテスト&lt;/h1&gt;
&lt;p&gt;ICFP プログラミングコンテストの説明については以下をご覧ください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ICFP Programming Contest は「なんでもあり」が特徴の，他とは一線を画す特徴的なプログラミングコンテストです．ACM の関数型プログラミング言語の学会 ICFP (International Conference on Functional Programming) に伴って毎年開催されていまして (1) プログラミング言語自由 (2) 計算資源自由 (2) チーム人数制限なし (3) 72 時間勝負 (4) 問題の形式も毎年大きく変化，等の特徴があります．優勝者は「その年のプログラミング言語」を決めることとなっており「その年はその言語の文句は言えない」とか．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='text-right'&gt;
引用元: &lt;a href=http://iwiwi.hatenablog.com/entry/20130927/1380255924&gt;http://iwiwi.hatenablog.com/entry/20130927/1380255924&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;コンテスト優勝チームが使用した言語は「優秀なハッカーに選ばれたプログラミング言語」として正式に認定されます。
さらに優勝チームには「使用したプログラミング言語を一年間無制限に自慢してよい」という名誉ある権利が与えられます。&lt;/p&gt;
&lt;p&gt;そのためICFPプログラミングコンテストは「最強のプログラミング言語を決める大会」という側面があります [&lt;a href="#footnote1"&gt;1&lt;/a&gt;]。&lt;/p&gt;
&lt;p&gt;最近は以下のような風潮もあるようなのですが:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;実は最近のICFPContestに対する参加者の態度にやや疑問を持っているんだ…&lt;br&gt;最強言語認定を自分の好きな言語に与えるために勝利を目指すんだと思ってたんだけど、まず勝つこと先行でそのためには混成言語編成チームでもかまわないみたいなのは風情に欠けるんじゃないかって&lt;/p&gt;&amp;mdash; Noriyuki  OHKAWA (@notogawa) &lt;a href="https://twitter.com/notogawa/status/893421960813715456"&gt;August 4, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;それでも「自分の好きな言語に優勝させてやる！」という熱い思いをもった参加者が今年も大勢参加しました。&lt;/p&gt;
&lt;p&gt;2017年、今年のコンテストを主催したのはオックスフォード大学です。&lt;/p&gt;
&lt;h1 id="rust"&gt;Rustで参加&lt;/h1&gt;
&lt;p&gt;私は昨年に引き続きRustで参加しました。8月4日から8月7日にかけての72時間です。&lt;/p&gt;
&lt;h1 id="_1"&gt;今年の問題&lt;/h1&gt;
&lt;p&gt;今年の問題を簡単にいうと「鉱山（λ）に道をつなげてより多くの都市（λから遠ければ遠いほど高得点）に到達しましょう。」という問題でした。
実際のルールはもっと複雑です。興味がある方は、&lt;a href="https://icfpcontest2017.github.io/problem/"&gt;実際の問題仕様&lt;/a&gt;を見てください。&lt;/p&gt;
&lt;p&gt;「百聞は一見にしかず」、以下の実際に行われた戦いの様子をご覧ください。私はチーム hayatox です。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="embed-responsive embed-responsive-4by3"&gt;
  &lt;iframe class="embed-responsive-item" src="https://icfpcontest2017.github.io/punttv/tv.html?game=games/full1/plain/randomMedium-ae0.json"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;(&lt;a href="https://icfpcontest2017.github.io/punttv/tv.html?game=games/full1/plain/randomMedium-ae0.json"&gt;Link&lt;/a&gt;, その他の大きなマップでの戦い: Map: &lt;a href="https://icfpcontest2017.github.io/punttv/tv.html?game=games/full2/futures-splurges/junction-c04.json"&gt;junction&lt;/a&gt;, Map: &lt;a href="https://icfpcontest2017.github.io/punttv/tv.html?game=games/full2/futures/nara-c11.json"&gt;nara&lt;/a&gt;)&lt;/p&gt;
&lt;h1 id="_2"&gt;結果&lt;/h1&gt;
&lt;p&gt;参加者から提出されたプログラムをもとにした、コンテストの&lt;a href="https://icfpcontest2017.github.io/post/full-one/"&gt;1stラウンドの結果&lt;/a&gt;が今週発表されました。
それによると参加チームは146チーム。そのうち26チームは提出したプログラムが仕様を満たしていないことが判明し参加不可能。残りの120チームの間で戦いが行われました。&lt;/p&gt;
&lt;p&gt;果たしてどの言語が今年は最強の名を手にするのでしょうか？&lt;/p&gt;
&lt;p&gt;各チームの使用した言語は現在のところコンテストのサイトでは明らかになっていません。そのため以下の条件で各言語を代表するチームを適当に選びました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GitHubを&lt;a href="https://github.com/search?utf8=%E2%9C%93&amp;amp;q=icfp+2017&amp;amp;type=Repositories"&gt;"icfp 2017"で検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;メインで使用した言語がほぼひとつであることをチェック(そうでなければスキップ）&lt;/li&gt;
&lt;li&gt;チーム名がREADME等に記載されている&lt;/li&gt;
&lt;li&gt;1stラウンドの結果にチーム名が載っている -&amp;gt; 採用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;各プログラミング言語とそれを使用したチームとその人数、そしてチームの獲得ポイント [&lt;a href="#footnote2"&gt;2&lt;/a&gt;] です 。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;使用言語 （チーム名: 人数  [&lt;a href='#footnote3'&gt;3&lt;/a&gt;] ）&lt;/div&gt;
  &lt;div class='col-md-8 text-center'&gt;獲得ポイント&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Rust (hayatox: &lt;a href='https://github.com/hayatoito/icfp2017/graphs/contributors'&gt;1&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 100.0%'&gt;
        &lt;span&gt;109&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;C++ (GennAI: &lt;a href='https://github.com/nya3jp/icfpc2017/graphs/contributors'&gt;8&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 97.2%'&gt;
        &lt;span&gt;106&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Haskell (Sampou: &lt;a href='https://github.com/nobsun/icfpc2017/graphs/contributors'&gt;7&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 99.1%'&gt;
        &lt;span&gt;108&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Common Lisp (cvnm: &lt;a href='https://github.com/cybevnm/icfpc-2017/graphs/contributors'&gt;1&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 63.3%'&gt;
        &lt;span&gt;69&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Clojure (drop table teams;: &lt;a href='https://github.com/candera/icfp-2017/graphs/contributors'&gt;2&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 34.9%'&gt;
        &lt;span&gt;38&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Java (A Storm Of Minds: &lt;a href='https://github.com/jandreske/icfpc2017/graphs/contributors'&gt;2&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 100.0%'&gt;
        &lt;span&gt;109&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Kotlin (Lambada Calculus: &lt;a href='https://github.com/PaulTaykalo/icfp-2017/graphs/contributors'&gt;9&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 78.9%'&gt;
        &lt;span&gt;86&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Scala (codingteam: &lt;a href='https://github.com/codingteam/icfpc-2017/graphs/contributors'&gt;4&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 44.0%'&gt;
        &lt;span&gt;48&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;C# (kontur.ru: &lt;a href='https://github.com/skbkontur/icfpc2017-kontur-ru/graphs/contributors'&gt;16&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 64.2%'&gt;
        &lt;span&gt;70&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;F# (lambda-llama: &lt;a href='https://github.com/lambda-llama/icfpc2017/graphs/contributors'&gt;5&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 0.0%'&gt;
        &lt;span&gt;0&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Elixir (The Mikinators: &lt;a href='https://github.com/claytonflesher/punting/graphs/contributors'&gt;8&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 38.5%'&gt;
        &lt;span&gt;42&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Python (Lambding Snakes vs Coding Monkeys: &lt;a href='https://github.com/pankdm/icfpc-2017/graphs/contributors'&gt;4&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 86.2%'&gt;
        &lt;span&gt;94&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Go (MIPT Lambda: &lt;a href='https://github.com/ygorshenin/icfp2017/graphs/contributors'&gt;3&lt;/a&gt;)&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar' style='width: 58.7%'&gt;
        &lt;span&gt;64&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Rust十分強い。しかし最強という感じはまだ受けません。&lt;/li&gt;
&lt;li&gt;ほとんどのチームは複数人で参加していることがわかりました。ひとりで参加している「ぼっちチーム」はRust以外はCommon Lispだけです。さすがLisp。孤高の存在。&lt;/li&gt;
&lt;li&gt;特にC++を用いたチームGennAIは8人中7(?)人がGoogleのソフトウェアエンジニアです。&lt;/li&gt;
&lt;li&gt;さらに特筆すべきはC#を用いたチーム&lt;a href="https://github.com/skbkontur/icfpc2017-kontur-ru"&gt;kontur.ru&lt;/a&gt;。なんと16人チーム！もはや数の暴力です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;正規化&lt;/h1&gt;
&lt;p&gt;数の暴力にはこちらも理不尽な理論で対抗するしかありません。「獲得ポイント」を「チームの人数」で割ってやりましょう [&lt;a href="#footnote4"&gt;4&lt;/a&gt;]。
正規化した結果は以下のようになります。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Rust&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 100.0%'&gt;
        &lt;span&gt;109.0&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;C++&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 12.2%'&gt;
        &lt;span&gt;13.2&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Haskell&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 14.2%'&gt;
        &lt;span&gt;15.4&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Common Lisp&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 63.3%'&gt;
        &lt;span&gt;69.0&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Clojure&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 17.4%'&gt;
        &lt;span&gt;19.0&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Java&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 50.0%'&gt;
        &lt;span&gt;54.5&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Kotlin&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 8.8%'&gt;
        &lt;span&gt;9.6&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Scala&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 11.0%'&gt;
        &lt;span&gt;12.0&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;C#&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 4.0%'&gt;
        &lt;span&gt;4.4&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;F#&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 0.0%'&gt;
        &lt;span&gt;0.0&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Elixir&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 4.8%'&gt;
        &lt;span&gt;5.2&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Python&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 21.6%'&gt;
        &lt;span&gt;23.5&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class='row'&gt;
  &lt;div class='col-md-4 text-right'&gt;Go&lt;/div&gt;
  &lt;div class='col-md-8'&gt;
    &lt;div class='progress'&gt;
      &lt;div class='progress-bar progress-bar-success' style='width: 19.6%'&gt;
        &lt;span&gt;21.3&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;以上によりRustが最強であることが示されました [&lt;a href="#footnote5"&gt;5&lt;/a&gt;]。証明終わり。&lt;/p&gt;
&lt;h1 id="_4"&gt;おまけ&lt;/h1&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="ja" dir="ltr"&gt;RustでICFPCに参加した同僚「コンパイラがチームメイトみたいなもんでしたよ」&lt;/p&gt;&amp;mdash; いもす (@imos) &lt;a href="https://twitter.com/imos/status/894884305998036992"&gt;August 8, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;そういえばコンテストの翌日にオフィスで会った時そんなこといった気がします。:)&lt;/p&gt;
&lt;p&gt;実際、私は大したことはしておらず、すべてはRustという素晴らしい言語を作成したコアチームと、&lt;a href="http://crates.io"&gt;crates.io&lt;/a&gt; という素晴らしいパッケージ・エコシステムのおかげです。今回のコンテストではじめて使用したライブラリがいくつかありますが、すべて苦労することなく使用することができました。私は巨人の肩に乗っかっただけです。&lt;/p&gt;
&lt;h1 id="_5"&gt;来年に向けて&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;「私の愛するJavaScriptがRustごときに負けるはずがない。」&lt;/li&gt;
&lt;li&gt;「はっはっはっ。自称最強Ruby使いであるこの私が出場していない大会で良い成績をとることに何の意味があるというのか？かわいいやつらめ。」&lt;/li&gt;
&lt;li&gt;「その証明には致命的な誤りがあります。どこが間違っているかというと....」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もっともなご意見でございます。しかしながら、参加しない人に反論する権利はまったく与えられないのがこのICFPプログラミングコンテストです。&lt;/p&gt;
&lt;p&gt;唯一の正しい反論の方法は「机上の空論を展開」することではなく、実際に「愛するXXX言語を勝たせてやる」ことです。
ぜひ来年のICFPプログラミングコンテスト2018に参加してみてください。&lt;/p&gt;
&lt;p&gt;興味をもった方は雰囲気をつかむため過去の問題に挑戦してみるとよいかもしれません。
特に2006年カーネギーメロン大学が主催した「古代文明が作ったコンピュータの仕様とその上で動くプログラムを記した古文書」を巡るコンテストは「&lt;a href="http://www.boundvariable.org/"&gt;神回&lt;/a&gt;」として伝説になっています [&lt;a href="#footnote6"&gt;6&lt;/a&gt;]。
ぜひ挑戦してみてくださいね。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;footnotes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a name="footnote1"&gt;&lt;/a&gt;[1]: ICFP学会としては、コンテストを通じて「関数型プログラミングの優位性」を示したいという思いがあったはずなのですが、コンテストでは必ずしもHaskellのような「いわゆる関数型プログラミング言語」が優勝するとは限りません。主催者かわいそう。&lt;/li&gt;
&lt;li&gt;&lt;a name="footnote1"&gt;&lt;/a&gt;[2]: チーム名をここに記載すべきかどうか迷ったのですが、各言語のコードを見ることは読者にとっても有益だと思い、リンクと共に載せています。特にC#チームとF#チームのREADMEは非常によく書けていて勉強になります。獲得ポイントは1st Roundの結果のみを使用しています。最終結果はICFP（学会の方）当日、現地オックスフォードで発表されます。最終結果が発表される前のタイミングでないとこのような方向性の記事は書けません。:)&lt;/li&gt;
&lt;li&gt;&lt;a name="footnote2"&gt;&lt;/a&gt;[3]: 各チームの人数は、レポジトリのREADMEにメンバーが記載されている場合はそこから、記載されていない場合は実際にレポジトリに貢献した人数で判断しています。&lt;/li&gt;
&lt;li&gt;&lt;a name="footnote3"&gt;&lt;/a&gt;[4]: 参考にした理論: &lt;a href="https://dic.pixiv.net/a/%E3%82%A6%E3%82%A9%E3%83%BC%E3%82%BA%E3%83%9E%E3%83%B3%E7%90%86%E8%AB%96"&gt;ウォーズマン理論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a name="footnote4"&gt;&lt;/a&gt;[5]: Common Lispが2位ですが、Lispは神が作った神言語なので妥当な結果といえるでしょう。&lt;/li&gt;
&lt;li&gt;&lt;a name="footnote4"&gt;&lt;/a&gt;[6]: 2006年のICFPコンテストはその内容があまりに濃かったため、参加者の間で「これ、もう主催者側が優勝でいいんじゃね？」と言われていたそうです。&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>六本木ではたらくソフトウェアエンジニアへのよくある質問とその答え (FAQ) (2015 - 2017)</title><link href="https://hayato.io/2017/faq/" rel="alternate"></link><published>2017-03-20T00:00:00+09:00</published><updated>2017-03-20T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2017-03-20:/2017/faq/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Hayato Ito is a Software Engineer @ Google.&lt;/li&gt;
&lt;li&gt;グーグルではたらくソフトウェアエンジニアです。&lt;/li&gt;
&lt;li&gt;ご意見やご質問 あるいは Typo 等を見つけたときは &lt;a href="https://github.com/hayatoito/hayatoito.github.io/issues"&gt;GitHub Issues&lt;/a&gt; にお願いします。
  答えられる範囲でできるだけ答えますね。&lt;/li&gt;
&lt;li&gt;この記事は不定期にアップデートしてできるだけ最新の状態を反映させるようにしていますが、いくつか内容が古い可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="contact-info"&gt;連絡先は？ (Contact Info)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class="fa fa-inbox"&gt;&lt;/i&gt; Mail: &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#104;&amp;#97;&amp;#121;&amp;#97;&amp;#116;&amp;#111;&amp;#64;&amp;#103;&amp;#111;&amp;#111;&amp;#103;&amp;#108;&amp;#101;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#104;&amp;#97;&amp;#121;&amp;#97;&amp;#116;&amp;#111;&amp;#64;&amp;#103;&amp;#111;&amp;#111;&amp;#103;&amp;#108;&amp;#101;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-google-plus"&gt;&lt;/i&gt; Google+: &lt;a href="http://google.com/+HayatoIto"&gt;google.com/+HayatoIto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; GitHub: &lt;a href="http://github.com/hayatoito"&gt;github.com/hayatoito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-twitter"&gt;&lt;/i&gt; Twitter (inactive): &lt;a href="http://twitter.com/hayatoito"&gt;@hayatoito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-twitter"&gt;&lt;/i&gt; Twitter: &lt;a href="http://twitter.com/shadow_hayato"&gt;@shadow_hayato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-slack"&gt;&lt;/i&gt; &lt;a href="https://freenode.net/"&gt;IRC freenode&lt;/a&gt;: hayato&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="tech-lead"&gt;テックリード (Tech Lead) &lt;a name="tech-lead"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="google-tech-lead"&gt;Google における Tech Lead (テックリード) とはどのようなお仕事ですか …&lt;/h2&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Hayato Ito is a Software Engineer @ Google.&lt;/li&gt;
&lt;li&gt;グーグルではたらくソフトウェアエンジニアです。&lt;/li&gt;
&lt;li&gt;ご意見やご質問 あるいは Typo 等を見つけたときは &lt;a href="https://github.com/hayatoito/hayatoito.github.io/issues"&gt;GitHub Issues&lt;/a&gt; にお願いします。
  答えられる範囲でできるだけ答えますね。&lt;/li&gt;
&lt;li&gt;この記事は不定期にアップデートしてできるだけ最新の状態を反映させるようにしていますが、いくつか内容が古い可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="contact-info"&gt;連絡先は？ (Contact Info)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class="fa fa-inbox"&gt;&lt;/i&gt; Mail: &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#104;&amp;#97;&amp;#121;&amp;#97;&amp;#116;&amp;#111;&amp;#64;&amp;#103;&amp;#111;&amp;#111;&amp;#103;&amp;#108;&amp;#101;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#104;&amp;#97;&amp;#121;&amp;#97;&amp;#116;&amp;#111;&amp;#64;&amp;#103;&amp;#111;&amp;#111;&amp;#103;&amp;#108;&amp;#101;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-google-plus"&gt;&lt;/i&gt; Google+: &lt;a href="http://google.com/+HayatoIto"&gt;google.com/+HayatoIto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; GitHub: &lt;a href="http://github.com/hayatoito"&gt;github.com/hayatoito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-twitter"&gt;&lt;/i&gt; Twitter (inactive): &lt;a href="http://twitter.com/hayatoito"&gt;@hayatoito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-twitter"&gt;&lt;/i&gt; Twitter: &lt;a href="http://twitter.com/shadow_hayato"&gt;@shadow_hayato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-slack"&gt;&lt;/i&gt; &lt;a href="https://freenode.net/"&gt;IRC freenode&lt;/a&gt;: hayato&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="tech-lead"&gt;テックリード (Tech Lead) &lt;a name="tech-lead"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="google-tech-lead"&gt;Google における Tech Lead (テックリード) とはどのようなお仕事ですか？ &lt;a name="google-tech-lead"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google では、チームやプロジェクト内でのリードエンジニアのことを Tech Lead と呼びます。
数人から10名ほどのチームに、Tech Lead が１人います。
私は Google Chrome の DOM Team と Web Components Project の Tech Lead です。&lt;/p&gt;
&lt;h2 id="_1"&gt;普段、何をしていますか？ &lt;a name="what"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主に Google Chrome で使用されているレンダリングエンジン Blink の開発です。&lt;/p&gt;
&lt;h2 id="_2"&gt;普段、どれくらいコードを書いていますか？ &lt;a name="commits"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Blink はオープンソースです。Commits は公開されています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codereview.chromium.org/search?owner=hayato&amp;amp;reviewer=&amp;amp;cc=&amp;amp;sort=modified&amp;amp;limit=100"&gt;- 2017 までのコミット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chromium-review.googlesource.com/q/owner:hayato%40chromium.org"&gt;2017 - のコミット&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/"&gt;DOM&lt;/a&gt; / &lt;a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/shadow/"&gt;Shadow DOM&lt;/a&gt; / &lt;a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/events/"&gt;Events&lt;/a&gt; / &lt;a href="https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/css/"&gt;CSS&lt;/a&gt; あたりを触っていることが多いです。&lt;/p&gt;
&lt;h2 id="_3"&gt;普段、どのようなコードを書いてますか？  &lt;a name="code"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;代表的なCL (CLとは Change List の略で、主にGoogleで使用されている用語。いわゆる"パッチ"に相当します）&lt;/p&gt;
&lt;p&gt;2016-2017: Shadow DOM V1 の Distribution Engine 関係の CLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chromium-review.googlesource.com/c/535493/"&gt;Minimize the number of reattached nodes after updating distribution by 2D dynamic programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chromium-review.googlesource.com/c/532734/"&gt;Rewrite Shadow DOM v1 distribution engine on the top of a new slotchange concept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codereview.chromium.org/1995203002/"&gt;Rewrite Shadow DOM distribution engine to support partial synchronous distribution for v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2014: Google Chrome の Event Dispatching を400倍速くした CL。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codereview.chromium.org/182683002"&gt;Lazy evaluation of event.path by numbering TreeScopes in DFS order for later O(1) queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このパッチは、Chrome の &lt;em&gt;&lt;a href="http://www.chromium.org/developers/speed-hall-of-fame"&gt;Speed Hall of Fame&lt;/a&gt;&lt;/em&gt; を受賞しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3/12/2014 - Improvement of the Week&lt;/p&gt;
&lt;p&gt;Last week Hayato Ito reduced checking if a DOM tree is a descendent of another from O(N) in the height of the tree of trees to O(1). In smaller trees this produces &lt;a href="https://chromeperf.appspot.com/report?masters=ChromiumPerf&amp;amp;bots=android-nexus5%2Cchromium-rel-mac8%2Cchromium-rel-win7-dual&amp;amp;tests=blink_perf%2FEvents_EventsDispatchingInShadowTrees&amp;amp;rev=256330&amp;amp;checked=core"&gt;2-3x faster event dispatching&lt;/a&gt;, but in the deeply nested trees Hayato created he saw more than a 400x improvement! I'd also like to thank Hayato for the &lt;a href="https://codereview.chromium.org/182683002"&gt;fantastic description&lt;/a&gt; of the patch and its effects in the CL description. Great work!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;出張は多いですか？ &lt;a name="trip"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web Standards に関わると、他のブラウザベンダ(Apple, Mozilla, Microsoft 等)と直接話をする必要があります。旅行が好きなら、Web Standards のお仕事はオススメです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2015:&lt;ol&gt;
&lt;li&gt;[Jan] Sydney (Midnight Train)&lt;/li&gt;
&lt;li&gt;[Apr] San Francisco, Mountain View (Shadow DOM F2F)&lt;/li&gt;
&lt;li&gt;[May] Sydney (BlinkOn4)&lt;/li&gt;
&lt;li&gt;[Jul] Mountain View (Custom Elements F2F)&lt;/li&gt;
&lt;li&gt;[Oct] San Francisco (BlinkOn5)&lt;/li&gt;
&lt;li&gt;[Nov] Sapporo (W3C TPAC)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;2016:&lt;ol&gt;
&lt;li&gt;[Jan] Mountain View / Cupertino (Custom Elements F2F)&lt;/li&gt;
&lt;li&gt;[Jun] Munich (BlinkOn6)&lt;/li&gt;
&lt;li&gt;[Nov]: Lisbon (W3C TPAC)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;2017:&lt;ol&gt;
&lt;li&gt;(Plan) [Jan] Mountain View / San Francisco (BlinkOn7)&lt;/li&gt;
&lt;li&gt;(Plan) [??]: San Francisco (W3C TPAC)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="web-web-standards"&gt;Web 標準 (Web Standards) &lt;a name="web-standards"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="spec-editor"&gt;Spec Editor とはどのようなお仕事ですか？ &lt;a name="spec-editor"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web そのものの仕組みをつくるお仕事です。Web 標準の仕様書を書きます。私は &lt;a href="http://w3c.github.io/webcomponents/spec/shadow/index.html"&gt;Shadow DOM&lt;/a&gt; の Spec Editor です。&lt;a href="https://dom.spec.whatwg.org/"&gt;DOM&lt;/a&gt; や &lt;a href="https://html.spec.whatwg.org/multipage/"&gt;HTML&lt;/a&gt; の仕様策定もしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/w3c/webcomponents/commits/gh-pages/spec/shadow"&gt;Commits for Shadow DOM Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/w3c/webcomponents/commits/gh-pages?author=hayatoito"&gt;Commits for Web Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="html-whatwg-html-standard-w3c-html5-chrome"&gt;HTML の仕様は WHATWG HTML Standard と W3C HTML5 の両方あります。Chrome の開発ではどちらを参考にしていますか？ &lt;a name="whatwg-w3c"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WHATWG の HTML Standard です。W3C の HTML5 仕様は見ていません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私が仕様の策定をしているのは &lt;a href="https://whatwg.org/"&gt;WHATWG&lt;/a&gt; の &lt;a href="https://dom.spec.whatwg.org/"&gt;DOM Living Standard&lt;/a&gt; や &lt;a href="https://html.spec.whatwg.org/multipage/"&gt;HTML Living Standard&lt;/a&gt; です。
  実際、私は W3C から W3C DOM の Editor になりませんか？といわれましたが、依頼を断りました。私は WHATWG DOM Standard のみにフォーカスしています。&lt;/li&gt;
&lt;li&gt;私も含めて Chrome の開発者が実装の際、参考にしているのは W3C DOM 仕様や W3C HTML5仕様ではなく WHATWG の DOM Standard や HTML Standard です。&lt;/li&gt;
&lt;li&gt;Chrome の バグトラッカー &lt;a href="http://crbug.com/"&gt;crbug.com&lt;/a&gt; 上でも、WHATWG の HTML Living Standard をベースに議論します。バグを報告をするときは、この辺りをぜひ理解しておいてください。&lt;/li&gt;
&lt;li&gt;私の知る限り、W3C HTML5 仕様の準拠を目指しているメジャーなブラウザはひとつもありません。Chrome, Safari, Firefox などすべてのメジャーなブラウザはWHATWG の DOM Standard / HTML Standard の準拠を目指しています。言い方を変えると、W3C HTML5仕様を参考にWebページをつくったところで、それをサポートしているメジャーブラウザは現在存在しませんし、今のところでてくる気配もありません。もし誰かがそのようなHTML5仕様に準拠したブラウザをつくったとしてもそのブラウザは、Chrome, Safari, Firefoxとのインターオペラビリティはありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="web-components-shadow-dom"&gt;Web Components / Shadow DOM &lt;a name="web-components-shadow-dom"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="web-components"&gt;Web Components とは? &lt;a name="web-components"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;早い話がこのような Web を目指します。難しいことは覚えなくてよい、誰もがタグを書くだけでOKなWebに戻します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gmail-app.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;google-header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;google-header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;gmail-app&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;google-hangout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;google-hangout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;google-mail&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;google-mail&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;gmail-app&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;昔とある講演のためつくったスライド: &lt;a href="https://hayato.io/webcomponents-slides/"&gt;https://hayato.io/webcomponents-slides/&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="shadow-dom"&gt;Shadow DOM とは？ &lt;a name="shadow-dom"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;毎回、説明にとても苦労します。簡単に言うと:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Web は DOM Node という基本的単位から成り立ちます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;複数の Node が あつまり Tree を形成して Node Tree になります。みなさんがみている Web ページは（おおまかにいうと）この Node Tree ひとつからできています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web の根本的な問題点のひとつとして、「他の Web ページの特定の部分を再利用することは本質的に困難である」というのがあげられます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;他の Web ページの Node Tree の Subtree を、自分の Node Tree に「混ぜて」使用した場合、なにが起きるかを事前に予期するのは非常に困難です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;つまり、これまでの Web は 「混ぜるな危険」でした。少し混ぜただけで、ページ全体が容易に壊れてしまいます。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shadow DOM は Node Tree 自体を &lt;em&gt;Shadow Tree&lt;/em&gt; として、他に干渉することなく再利用することを可能にします。Node Tree 自体を、コンポーネントの単位とすることが可能になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これにより、抽象化の概念がなかった、DOM に抽象化の概念をもたらします。C に Class の概念を持ち込んだのが C++ であるのと同様に、DOM に抽象化の概念をもたらすのが Shadow DOM です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;これまでの Web ページがひとつの Node Tree から成り立っていたのに対して、Shadow DOM の世界では Web ページは Node Tree の Tree から成り立ちます。
    Tree だった Web が これからは Tree of Trees となります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下も参考にしてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.chromium.org/2016/08/chrome-53-beta-shadow-dom.html"&gt;Chrome 53 Beta: Shadow DOM, PaymentRequest, and Android autoplay (Posted by Hayato Ito, Shadow DOM Chaffeur)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/primers/shadowdom/"&gt;Shadow DOM v1: self-contained web components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="shadow-dom_1"&gt;Shadow DOM はどこに使用されているのですか？ &lt;a name="shadow-dom-usage"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chrome / Blink の built-in elements (&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; など)。つまり Electron や Atom Editor や Visual Studio Code なども。&lt;/li&gt;
&lt;li&gt;Chrome / Blink の devtools や Setting Page などたくさん。&lt;/li&gt;
&lt;li&gt;Andoroid の WebView&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ampproject.org/"&gt;AMP (Accelarated Mobile Pages)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.twitter.com/web/embedded-tweets"&gt;Twitter: Tweet の埋め込み &lt;code&gt;&amp;lt;twitterwidget&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Polymer を使用しているページ:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com/"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gaming.youtube.com/"&gt;YouTube Gaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://earth.google.com/web/"&gt;Google Earch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Angular (Option)&lt;/li&gt;
&lt;li&gt;その他 (Todo)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="web-components_1"&gt;もう少し詳しく Web Components について教えてください &lt;a name="web-components-details"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(...Shadow DOMからの続き) Shadow DOM と Custom Elemenets と HTML Imports を組み合わせることによって、Web 開発者は、自分のつくった世界そのものを
Web Component として簡単に再利用可能な形で公開することができるようになります。&lt;/p&gt;
&lt;p&gt;コンポーネントの利用者は、タグ を書くだけで、他の人がつくったコンポーネントを再利用できます。
ひとつの Web Component は、その内部ではさらに複数の Web Component を使用しているかもしれませんが、利用者はそれは気にしなくてよいです。&lt;/p&gt;
&lt;p&gt;...とここまで聞くと、とても複雑なことをしているように思えますが、実は目指している世界は、むしろその逆です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;複雑高度になり一部の技術者だけのものになりつつある現在の Web を、HTML の"タグ" を手書きするだけで良かった誰もが楽しめる Web に戻します:&lt;/p&gt;
&lt;p&gt;Web プラットフォームは進化を続けています。もはやタグを手書きして HTML を書くだけでは、とてもユーザーを満足させるサイトは作成できなくなりました。
「きちんとした」サイトをつくるには、多くのことを学習する必要があります。&lt;/p&gt;
&lt;p&gt;どうして多くのことを覚えなければいけないのでしょうか？ それは Web プラットフォームの根幹である DOM に抽象化の仕組みがないのが大きな理由のひとつです。
適切な抽象化レイヤーがあれば、本来、知らなくてよいことは「隠す」ことができるはずです。&lt;/p&gt;
&lt;p&gt;Web Components の世界では、「タグ」を書くだけで、他の人が書いた Web Components をレゴブロックのように組み合わせて利用できます。
コンポーネントの内部がどのようになっているかは知る必要はありません。
そう、古き良きタグを手書きするだけでよかったあの時代に戻ります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ブラウザが本来もつパワーを Web 開発者に開放します:&lt;/p&gt;
&lt;p&gt;たとえば HTML に標準で用意されている &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグは、誰でもタグを書くだけで、動画を再生することができます。
&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグの内部がどのように実装されているかは気にしませんよね？
実は &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグは Google Chrome では Shadow DOM を内部で使用しています。ある意味、これはひとつの Web Components です。&lt;/p&gt;
&lt;p&gt;現在の Web では、&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグと同じようなものを、Web開発者は自分ではつくれません。
Web Components の世界では、Web 開発者に Shadow DOM のもつ力を開放します。私は、Web 開発者の情熱・想像力を信じています。&lt;/p&gt;
&lt;p&gt;誰もが Web Components を作れるようになり、そしてそれを公開し誰もが再利用できたら、ステキですよね。
Shadow DOM や Web Components はそのような世界を目指しています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Web Components は 2014 の &lt;a href="http://www.w3.org/blog/2014/05/web-components-won-the-best-new-technology-2014-net-award/"&gt;The Best New Web Technology new Award&lt;/a&gt; を受賞しました。&lt;/p&gt;
&lt;h2 id="shadow-dom-8800000"&gt;Shadow DOM のコードは 8,800,000行 あるというのは本当でしょうか？ &lt;a name="shadow-dom-8.8m"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;違います。この &lt;a href="https://trac.webkit.org/changeset/164131"&gt;CL&lt;/a&gt; や この WebKit の &lt;a href="https://webkit.org/blog/2455/last-week-in-webkit-millions-of-lines/"&gt;Blog&lt;/a&gt;
をみて、一部でそのような勘違いをしてしまった人がいるようです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Purge remaining ENABLE(SHADOW_DOM) cruft.&lt;/p&gt;
&lt;p&gt;&amp;lt;​https://webkit.org/b/128827&amp;gt;&lt;/p&gt;
&lt;p&gt;Source/WebCore:&lt;/p&gt;
&lt;p&gt;Remove the remaining 8.8 million lines of Shadow DOM code to align
   with goals for intent to ship 60fps on mobile in 2014.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この CL はその先日に Google が Blink から WebKit 由来の 8.8 million 行のコードを削除したとの記事:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://techcrunch.com/2013/05/16/google-has-already-removed-8-8m-lines-of-webkit-code-from-blink/"&gt;Google Has Already Removed 8.8M Lines Of WebKit Code From Blink&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;を受けての Apple さんのジョークです。&lt;/p&gt;
&lt;h2 id="shadow-dom-spec"&gt;Shadow DOM の Spec の場所は? &lt;a name="shadowdom-spec"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;常に 最新の Editors Draft (&lt;a href="http://w3c.github.io/webcomponents/spec/shadow/"&gt;http://w3c.github.io/webcomponents/spec/shadow/&lt;/a&gt;) を参照あるいはリンクを貼るようにしてください。&lt;/p&gt;
&lt;h2 id="_5"&gt;今のフロントエンドの現状についてどう思いますか？ &lt;a name="front-end"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;フロントエンドの人はなぜか自虐的なことばかりを言っている印象があるのですが、自虐からはなにも生まれないので、もっと誇りと自信をもってください。
  ユーザーが快適にWebを利用できるのは、フロントエンド開発者のおかげです。Web 大好きな人は想像以上にいっぱいいますよ。みんな同じ船に乗っている仲間です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自虐するよりは、ちゃんと中の人にフィードバッグしたほうがいいです。今どきはどこでも GitHub Issues 等で声を届けることができます。
  Twitterでいくらつぶやいたところで届かないです。「絶対中の人に届けてやる！」という強い意思が必要です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web プラットフォームは天から降ってきて一方的に与えられるものでは決してなく、人間がつくっているものです。
  自分には関係ないと思うよりは、もっとWeb そのものの進化に積極的に関わるようにするときっともっと面白いと思いますよ。
  変えられないものなんてありません。いつでも大歓迎です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="web"&gt;今後 Web で取り組みたいことは？  &lt;a name="future-plans"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;まだまだ Web Components / Shadow DOM についてはやることが山積みではあるのですが (HTML Modules 等も控えています)、
&lt;a href="https://annevankesteren.nl/2016/04/html-components"&gt;Web プラットフォームの20年以上に渡る問題を解決した&lt;/a&gt;あとは、以下のことに取り組みたいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DOM と CSS の根本的な問題は Shadow DOM で直した（希望）ので、次に手をつけるとしたらやはり JavaScript ですね。Rust -&amp;gt; WebAssembly, Rust DOM Bining 辺り。
    JavaScript を Rust で置き換えることができれば Web はより面白くなります。
    いままで JavaScript を使用することに難色があったため参入してこなかった優れたプログラマたちが、その障壁がなくなることにより一挙にWebに参入してくれば、
    いままで JavaScript の壁で守られていた JavaScript 専門のフロントエンドエンジニアさんたちもうかうかしていれられなくなるかもね（適当）。どんなときも健全な競争は良いことです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;あるいは Blink 自体を Rust で書き直すとか。現在は主に C++ で書かれています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あくまで未確定な予定ですので、あまり過度な期待はしないで、温かく見守っていてくださいね。&lt;/p&gt;
&lt;h1 id="_6"&gt;漫画「王様達のヴァイキング」の技術監修 &lt;a name="kingsviking"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_7"&gt;「王様達のヴァイキング」って？ &lt;a name="what-is-kingsviking"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「&lt;a href="http://spi-net.jp/weekly/comic008.html"&gt;王様達のヴァイキング&lt;/a&gt;」は、
小学館の&lt;a href="http://spi-net.jp/"&gt;週刊スピリッツ&lt;/a&gt;で連載中の漫画です。
ハッカーと投資家が主人公です。&lt;/p&gt;
&lt;p&gt;Twitter 公式アカウントは、&lt;a href="https://twitter.com/kingsviking"&gt;@kingsviking&lt;/a&gt; です。&lt;/p&gt;
&lt;h2 id="_8"&gt;漫画の監修とは具体的にはどのようなことをするのでしょうか？ &lt;a name="kingsviking-supervisor"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;私は技術監修としてこの漫画をサポートしています。主に次のようなことに関わっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ストーリーや設定について技術面からサポート。&lt;/li&gt;
&lt;li&gt;是枝くんをはじめとする登場人物たちの「サポート」。&lt;/li&gt;
&lt;li&gt;毎週のネームやゲラのチェック。 技術的に不自然な箇所やセリフについてアドバイス。&lt;/li&gt;
&lt;li&gt;単行本のカバー下のアイデア出しと巻末用語解説の執筆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つまり、一般の読者からは「難しいところはわからないです（けれど面白いです！）」と言われ、詳しい人からは「この設定気にいらない！」と石を投げられる側の役割です...。&lt;/p&gt;
&lt;p&gt;この作品にかかわる方（漫画家さん、担当編集さん、ライターさん等）、みなさん本当に漫画を面白くするプロ・よい文章を書くプロで、いつもその仕事のプロフェッショナルっぷりに感心しきっています。
週刊連載を抱える漫画家さんがコンスタントにアウトプットを重ねていく姿を、みなさんより近いところで見ることができるのは、とてもよい刺激になります。&lt;/p&gt;
&lt;p&gt;プログラミングの素晴らしさが、漫画のもつ偉大な力を通じて、多くの読者に伝わればよいなと思ってお手伝いしています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;漫画家さん宛に届く作品のファンの方からのファンレターをときどき見せてもらうことがあります（もちろん宛先として「関係者の皆様」となっていた場合です）。
そこにはとても温かいお言葉があり「あー、漫画家さんってとてもとても大変なお仕事だけど、こうしてファンの皆様から直接温かいお手紙を頂けるとは素晴らしいお仕事だなー。苦労が報われるわー」とちょっぴり羨ましい気持ちにもなったりします。&lt;/p&gt;
&lt;p&gt;それにひきかえ、ソフトウェアエンジニアがいくらコードを書いても、ファンの方ではなくユーザーの方から「バグさっさとなおせ！」といわれるだけですからね。いや、とてもありがたいです。いつも貴重なフィードバッグありがとうございます。&lt;/p&gt;
&lt;p&gt;一度くらい感謝されてもいいのでは...と思いつつ、それでも好きだからコードを書き続けるのです。:)&lt;/p&gt;
&lt;h2 id="_9"&gt;是枝くんのモデルですか？ &lt;a name="zer0"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;違います。是枝くんが使用するプログラミング言語・ソースコードは私にとてもよく似てますが、あくまで偶然です。&lt;/p&gt;
&lt;h2 id="_10"&gt;坂井さんのモデルですか？ &lt;a name="sakai"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;違います。パンイチになったりしません。&lt;/p&gt;
&lt;h2 id="_11"&gt;笑い猫のモデルですか？ &lt;a name="laughingcat"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;違います。裸になったりしません。&lt;/p&gt;
&lt;h2 id="_12"&gt;ヴァルちゃん のモデルですか？ &lt;a name="valkyrja"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;違います。ワインを頭からかけたりしません。&lt;/p&gt;
&lt;h2 id="_13"&gt;漫画では、これまでどのようなプログラミング言語が登場しましたか？ &lt;a name="kingsviking-programming-language"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これまで  C, C++, PowerPC Assembly, Python 3, Scala, Rust 等が登場しています。&lt;/p&gt;
&lt;p&gt;例)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是枝くん: PowerPC Assembly (スパコンでパスワードを解析するときに使用 @単行本2巻), Python 3 (ATM に対する Man-in-the-middle Attack への Counter Attack @単行本4巻), C++ (何度も登場しています。改良型 &lt;em&gt;Sniper&lt;/em&gt; @単行本11巻 など)&lt;/li&gt;
&lt;li&gt;ヴァルちゃん: Scala (マネーロンダリング Bot @単行本5巻, オンライン証券取引のクラッキング @単行本8巻), Rust (省庁に寄生する自己増殖型 Bot - &lt;em&gt;Pawn&lt;/em&gt;@単行本11巻)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;興味のあるかたは (単行本を買って) コードも読んでみてくださいね。&lt;/p&gt;
&lt;h2 id="_14"&gt;監修をしているということはセキュリティの専門家ですか？ &lt;a name="security"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;違います。もちろんブラウザの開発においてセキュリティは最重要視しているので、セキュリティ関連のお仕事をすることもありますがそれはメインではありません。&lt;/p&gt;
&lt;p&gt;最近でいうと:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;世界的に有名なポーランドのセキュリティ研究者 Mariusz Mlynski が報告してきた Chrome のUniversal XSS 脆弱性についてその原因の調査・修正したり
    (&lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=630870"&gt;crbug.com/630870&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(この脆弱性の報告には 賞金 $7,500 が支払われました。報告してくれた人には賞金がでたのに、直した私は1ドルももらえません （当たり前））&lt;/p&gt;
&lt;p&gt;引用: &lt;a href="https://chromereleases.googleblog.com/2016/12/stable-channel-update-for-desktop.html"&gt;https://chromereleases.googleblog.com/2016/12/stable-channel-update-for-desktop.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[$7500][630870] High CVE-2016-5204: Universal XSS in Blink. Credit to Mariusz Mlynski&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust の iron (Web サーバ）で使用される staticfile crate に脆弱性を見つけたので報告したら (&lt;a href="https://github.com/iron/staticfile/issues/89"&gt;iron/staticfile/issues/89&lt;/a&gt;)、
   「よかったら、直してくれない？」といわれたので直してあげたり&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;してました。だ、だけど、メインのお仕事じゃないからね！&lt;/p&gt;
&lt;h1 id="google"&gt;Google ソフトウェアエンジニアの採用 &lt;a name="google-hiring"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="google_1"&gt;今まで何人、Googleでソフトウェアエンジニアの面接（インタビュー）をしましたか？ &lt;a name="google-interview-number"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;150人以上です。すべて 1 : 1 での45分ほどの面接です。電話インタビューやインターンの面接も含みます。&lt;/p&gt;
&lt;h2 id="_15"&gt;インタビューではどのようなことを聞くのでしょうか？ &lt;a name="google-interview"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Q. 「バスにゴルフボールはいくつ入るでしょうか？」&lt;/p&gt;
&lt;p&gt;A. 「そんな問題はもはや聞いていないです。いまはゴルフボールにバスが何台はいるかを聞いています。」&lt;/p&gt;
&lt;p&gt;...といった、変な情報に振り回されないでください。&lt;/p&gt;
&lt;h2 id="google_2"&gt;Google にソフトウェアエンジニアとして入るにはどのような勉強・経験をしておけばよいでしょうか? &lt;a name="google-join"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「何をすればよいのか」を挙げるのは難しいです...。 (TODO: いつかちゃんと書く)&lt;/p&gt;
&lt;p&gt;その反対、「特にやる必要はないこと」を挙げるなら簡単にできます。
たとえば、以下の項目はプログラマとしての能力とはいっさい関係がないことは、みんな理解していますので、安心してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter での発言数やフォロワー数&lt;/li&gt;
&lt;li&gt;ブログの記事数・ブックマーク数&lt;/li&gt;
&lt;li&gt;本や雑誌の記事の執筆&lt;/li&gt;
&lt;li&gt;勉強会やハッカソンの出席回数・登壇数&lt;/li&gt;
&lt;li&gt;イベントの主催&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの活動を特にしていなくても、気にしないでください。
プログラマ・ソフトウェアエンジニアとして濃密な時間を過ごした人が正しく報われるインタビューをいつも心がけています。&lt;/p&gt;
&lt;h2 id="google_3"&gt;ソフトウェアエンジニアとしてはたらくにあたって Google のよいところって?  &lt;a name="google-swe"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ソフトウェアエンジニアリング的に正しいことを正しく行っている&lt;/p&gt;
&lt;p&gt;「正しいことをやりたいのに」技術レベルが下の人に合わせざるを得ずに断念せざるを得ない...ということはまずありません。
その逆で、「技術が上」の人にみんなが合わせるように努力している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ソフトウェアエンジニアの採用が一貫して実力主義&lt;/p&gt;
&lt;p&gt;採用において、実力のみがものをいう仕組みを制度として持っている・その制度を維持しようとしているところ。
これを続けている限り、Google は強いと思います。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;みんなコードを書く&lt;/p&gt;
&lt;p&gt;コードを書くのがソフトウェアエンジニアのお仕事です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;無駄なプロジェクトはわりとあっさり切り捨てる。その判断が早い。&lt;/p&gt;
&lt;p&gt;エンジニアのリソースが限られている以上、意識的に切り捨てていかないと、前には進めません。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="google_4"&gt;Google でのインターンについて &lt;a name="google-intern"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="google_5"&gt;今まで何人、Googleでインターンのホストをしましたか？ &lt;a name="google-intern-number"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;6人です。すべて学部生です。&lt;/p&gt;
&lt;h2 id="google_6"&gt;Google でのソフトウェアエンジニア・インターンはどのようなことをするのでしょうか？ 応募したいのですが、スキル的に不安です...。  &lt;a name="google-interview-what"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TODO: 書きます。&lt;/p&gt;
&lt;h2 id="2017"&gt;今年(2017年)も、インターンのホストをしますか？ &lt;a name="google-intern-rust"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;いい人がいれば。&lt;/p&gt;
&lt;p&gt;（データ構造やアルゴリズムの基本は当たり前として）今年は特に Rust がひと通りできる かつ システムプログラミングを苦手にしない人に会えたらいいなー。どこかにいないかなー。［壁］д・)ﾁﾗｯ&lt;/p&gt;
&lt;p&gt;興味があればぜひ応募してくださいね。&lt;/p&gt;
&lt;h2 id="google-step"&gt;Google STEP インターンではどのようなことを行うのですか？ &lt;a name="google-step-intern"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TODO: 書きます。&lt;/p&gt;
&lt;p&gt;当分の間、質問があればこちらに &lt;a href="https://github.com/hayatoito/hayatoito.github.io/issues"&gt;GitHub Issues&lt;/a&gt; どうぞ。&lt;/p&gt;
&lt;h1 id="_16"&gt;競技プログラミング / レッドコーダー &lt;a name="competitive-programming"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="google_7"&gt;レッドコーダーになると Google からお誘いがくると聞きました。 &lt;a name="redcoder"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google から誘いがくるというのは、「よかったら面接をうけてみませんか？」くらいの意味しかありません。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;誘いが来て面接を受ける場合&lt;/li&gt;
&lt;li&gt;自ら応募して面接を受ける場合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1 と 2 で採用プロセスは基本変わらないです。&lt;/p&gt;
&lt;p&gt;私は今はインタビューする側ですが、インタビュー中は 1 と 2 の違いを意識していません。&lt;/p&gt;
&lt;p&gt;Google の採用担当の人が何度も熱心に声をかけた結果、ようやく面接にきていただいたにもかかわらず、
エンジニアがインタビューした結果、思うような評価が得られなかった場合は、普通にお断りされてしまいます。&lt;/p&gt;
&lt;h2 id="goolge"&gt;Goolge に入るにあたって、競技プログラミングの勉強をしておいたほうがよいでしょうか？ &lt;a name="google-competitive-programming"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これはよく聞かれる質問です。以下、事実のみを書いておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google のソフトウェアエンジニアになるにあたって、レッドコーダーになることは必須ではありません。&lt;/li&gt;
&lt;li&gt;私からみて「すごいエンジニアだなー」という人で、競技プログラミングの経験が全くないという人はごろごろいます。&lt;/li&gt;
&lt;li&gt;競技プログラミングはどうしても競技システムの制限があるため、限られた知識しか身につきません。競技プログラミングで必要となる「アルゴリズムとデータ構造」などは、ソフトウェアエンジニアにとって必要な経験・知識のほんの一部ですし、それらを身につけるにあたってより効率的な学習方法は他にもたくさんあります。&lt;/li&gt;
&lt;li&gt;競技プログラミングのレートが Resume に書いてあったとしても、その事実自体は1:1インタビューの評価には直接影響しないです。評価はあくまで面接時の実際のパフォーマンスで決まるのが原則です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下は（事実とは限らない）意見です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いろんなことを経験しておいたほうが長い目でみてお得です。おすすめは学生なら &lt;a href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt; などに参加することです。
  学生じゃないとしても、Summer of Code で記載されている &lt;a href="https://summerofcode.withgoogle.com/projects/"&gt;プロジェクトの一覧&lt;/a&gt; を見てみましょう。
  この世の中は解決を待っている素敵な問題たちであふれています。&lt;/li&gt;
&lt;li&gt;Google は「プロダクト（製品）を実際にユーザーに届けてなんぼ」の会社だと思っていますので、「プロダクトのコードが書ける」能力が大事です。&lt;/li&gt;
&lt;li&gt;「競技プログラミングは役に立たない」という意見もありますが、プログラミングという楽しい行為が「役に立つ」「役に立たない」の観点のみで語られるなんて、実にもったいないことです。
  「役に立たない」プログラミングは最高に楽しいですよ。&lt;/li&gt;
&lt;li&gt;「競技プログラミング」の経験があまりない人が、「競技プログラミングは役に立たない！」と主張する姿は、あまり格好のいいものではないので、
   個人的には私のようにいったんレッドコーダーになっておいてから、競技プログラミング界隈からはそっと身をひいて、「競技プログラミングは役に立つ・立たない！」論争を外からそっと見守るのがよいのかと思います。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_17"&gt;プログラミング &lt;a name="programming"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_18"&gt;どのようなプログラミング言語を普段使用していますか？その用途は？ &lt;a name="programming-language"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: Google Chrome が使用しているレンダリングエンジン Blink の開発。&lt;/li&gt;
&lt;li&gt;Rust: CPU Intensive なコードを安全に書きたいとき。JVM に絶望したとき。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python: Chrome の開発で使用する Tool や個人の Tool 等を書くとき。Python で書くのはおよそ 100 行以下までです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追記 (2016): 最近は個人用の Tool （100行以下の規模のものでも) Rust で書くようにしてます。Python を使う場面はとても減りました。
   この規模の Tool で Rust を使うのが正解と思う人はほとんどいないと思いますが、最近はだいぶ Rust に慣れてきたので、
   生産性の観点でも Python より Rust のほうが上になりつつあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scala: 1,000 行以上のある程度大きなものを書くとき。footprint をあまり気にしなくてよいとき。ICFPC (関数型言語の国際学会が毎年開催しているプログラミング大会)に参加するとき。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追記 (2016): Rust を使い始めてからは Scala はほとんど使わなくなりました。2016 からは ICFP Programming Contest も Rust で参戦しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Haskell: まともな型システムが欲しくなったとき。Scala の型システムに絶望したとき。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript: Web。&lt;/li&gt;
&lt;li&gt;Shell Script: シェル環境に直接作用するものや、zsh の Line Editor 用の function など。&lt;/li&gt;
&lt;li&gt;Emacs Lisp: 趣味と実益。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_19"&gt;各プログラミング言語において、後世に残すべき価値のあるものはなんだと思いますか？ &lt;a name="programming-language-values"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: Move Semantics, Zero-Overhead Principle, RAII, References, Template and Monomorphization&lt;/li&gt;
&lt;li&gt;Lisp: Macro, s-expression&lt;/li&gt;
&lt;li&gt;Haskell: Type System, Type Inference, Type Classes, algebraic data types, Pattern Matching&lt;/li&gt;
&lt;li&gt;OCaml: Type Inference, algebraic data types, Pattern Matching&lt;/li&gt;
&lt;li&gt;Scheme: Hygienic macros&lt;/li&gt;
&lt;li&gt;Rust: (後述)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_20"&gt;プログラミング言語がひとつだけしか選べないとしたら何を選びますか？ &lt;a name="best-programming-language"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rust。&lt;/p&gt;
&lt;h2 id="rust"&gt;Rust のよいところを教えてください。 &lt;a name="rust"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rust は Move Semantics を言語デザインの中心にすることで、驚くほど多くの問題が統一的に解決できるということを実用的に示した唯一の言語だと思います。&lt;/p&gt;
&lt;p&gt;とくに C++ の良いところと危険なところを理解している人には、とてもオススメできるプログラミング言語だと思います。
逆にいうと、C++ への理解が足りない （というよりコンピュータの基礎がわかっていない）人にとっては、とても学習曲線が高いプログラミング言語だと思います...。
学習曲線が高いかわりに、いままでのプログラミング言語では放置されていた多くの問題が静的に解決できるので、見返りがとても大きいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/book/ownership.html"&gt;Ownership&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/book/references-and-borrowing.html"&gt;Borrowing&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/book/lifetimes.html"&gt;Lifetimes&lt;/a&gt; の仕組み。メモリだけでなくネットワークコネクションなどのリソース管理全般に関するバグをコンパイル時に発見します。&lt;/li&gt;
&lt;li&gt;安全性を重点をおきながら、同時に Zero-Cost Abstractions について妥協していません。安全性のチェックはコンパイル時に解決済みなので、実行時に余分なオーバーヘッドはありません。C++ と同等に速いです。Zero-Cost Abstractions を追求しないと、 C++ の置き換えにはなれないのでとても重要です。&lt;/li&gt;
&lt;li&gt;モダンなプログラミング言語なら当然あってほしい機能（&lt;a href="https://doc.rust-lang.org/book/patterns.html"&gt;Pattern Matching&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/book/enums.html"&gt;Algebraic data type&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/book/traits.html"&gt;Traits&lt;/a&gt; 等）をちゃんと備えています。Zero-Cost Abstraction を保ちつつ、十分に高い抽象化レベルでコードを安全に書けます。高い抽象度は高い生産性をもたらします。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/book/macros.html"&gt;Macro&lt;/a&gt; や Compiler Plugins があります。Macro は &lt;a href="https://en.wikipedia.org/wiki/Hygienic_macro"&gt;Hygienic macro&lt;/a&gt; です。identifier の衝突の心配はありません。&lt;/li&gt;
&lt;li&gt;vtable が必要になる Dynamic Dispatch よりも、Static Dispatch (Parametric Polymorphism) が推奨されています。正しい。&lt;/li&gt;
&lt;li&gt;コストがかかる処理を書くときはプログラマにちゃんと罪悪感を感じてもらうような API デザインが意図的に多く採用されています。
    未熟なプログラマが、知らないうちに効率の悪いコードを書くのを防ぐ教育的効果があります。&lt;/li&gt;
&lt;li&gt;C などの他のプログラミング言語との 相互呼び出し (&lt;a href="https://doc.rust-lang.org/book/ffi.html"&gt;FFI&lt;/a&gt;) が容易です。ランタイムレスですので、Rust で書いておけばすべてのプログラミング言語の資産になりえます。&lt;/li&gt;
&lt;li&gt;System Programming Language です。必要に応じて &lt;a href="https://doc.rust-lang.org/book/unsafe.html"&gt;unsafe&lt;/a&gt; なコードを書けます。OS が書けます。&lt;/li&gt;
&lt;li&gt;Type System。あらゆるところに型をつけようという強い意志があります。そのため他のプログラミング言語ならランタイム時に行わざるをえないこともコンパイル時に解決・最適化できます。&lt;/li&gt;
&lt;li&gt;コンパイラにしっかり守られている感覚が強いです。ただし unsafe な部分を書くときは、「ここから先はコンパイラは助けてくれない。自分がしっかりしなくては...」という気分になれます。&lt;/li&gt;
&lt;li&gt;十分に賢い型推論 （Lifetime のサポートがあるため 厳密には Hindley/Milner ではありません）。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;他のプログラミング言語に備わっている定評のあるアイデアやパラダイムからインスパイアされています。代表的なものとしては:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SML, OCaml: algebraic data types, pattern matching, type inference&lt;/li&gt;
&lt;li&gt;C++: references, RAII, smart pointers, move semantics, monomorphization, memory model&lt;/li&gt;
&lt;li&gt;Cyclone: region based memory management&lt;/li&gt;
&lt;li&gt;Haskell: typeclasses&lt;/li&gt;
&lt;li&gt;Scheme: hygienic macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などが挙げられます (&lt;a href="https://doc.rust-lang.org/reference.html#appendix-influences"&gt;参考&lt;/a&gt;)。
これらは、100人中99人が「これは間違いなくよいもの☆」と思うであろう定評のある機能やパラダイムです。&lt;/p&gt;
&lt;p&gt;その一方、100人中40人が「こんなのいらないです。お願いですからやめてください。」と思うであろう機能・パラダイム、たとえば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;よく見かけるタイプのいわゆる Class と Class の継承をもとにした OOP (オブジェクト指向プログラミング) [Java, Scala, C++, Python 等]&lt;/li&gt;
&lt;li&gt;Function Overloading [C, C++, Java 等]&lt;/li&gt;
&lt;li&gt;やめてほしい暗黙の型変換: int -&amp;gt; float など [C, C++, Java, Python 等ほとんどのプログラミング言語]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などについては「そんなのいりません。出直してきてくだい。」という感じで最初から入れる気がまったくないところが素敵です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust_1"&gt;Rust って関数型プログラミング言語なんでしょ？ 難しそう。 &lt;a name="rust-is-functional-programming"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rust はあえていうなら「型クラス指向 (Type Class Oriented )」「Move Semantics Oriented」のプログラミング言語です。&lt;/p&gt;
&lt;p&gt;Rust のことを関数型プログラミング言語と呼んでいる人がいたら、その人は Rust のことも関数型プログラミングのこともどちらもわかっていない可能性が高いです。
「これは◯◯指向だ」「いや◯◯型言語だ」のような抽象的な議論はあまり生産的ではないので、個々の具体的な特徴についてその背景・意義・有用性についてきちんと学んだほうが生産的です。&lt;/p&gt;
&lt;h2 id="rust_2"&gt;Rust って学習コストが高いんですよね？ 難しそう。 &lt;a name="rust-is-hard"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rust は学習コストが高いプログラミング言語と思われていますが、そもそも（ある程度大規模な）「プログラムを正しく」書くこと自体が普通の人間には相当難しいことです。
これまでの学習コストが低いとされているプログラミング言語は、最初のほうだけ「（なんとなく）動いている」プログラムを書くのを助けてくれるだけであり、「正しいプログラム」を書くことについては何も助けてくれず放置プレイです。
最終的にユーザーにすべての責任・負担がかかります。&lt;/p&gt;
&lt;p&gt;Rust は「正しいプログラム」を人間が書くまできちんと指摘してくるので学習コストが高くなってしまいますが、
それらはいずれは何らかの形で身につけなければいけないことなのでむしろありがたいことです。
これまではユーザーが担っていた責任の一部を、「コンパイラに押し付ける」ことができます。&lt;/p&gt;
&lt;p&gt;Rustは「学習コストが高い」言語というよりは「プログラミングの学習コストを可視化してくれる」言語といったほうがいいかもしれません。
これまで「雰囲気でプログラミング」してきた人にとって Rust の学習コストが高く感じるのは、きちんと可視化がうまくいっている結果です。&lt;/p&gt;
&lt;h2 id="icfp-programming-contest"&gt;&lt;a href="http://www.icfpconference.org/contest.html"&gt;ICFP Programming Contest&lt;/a&gt; には何を使用して参加してますか？ &lt;a name="icfpc"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2009 - 2015 は Scala で、2016 は  Rust で参加しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.ittc.ku.edu/icfp-contest/"&gt;2009&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Scala で参加。&lt;/p&gt;
&lt;p&gt;シャトルを操縦してスペースデブリを回収するプログラムをつくる問題。コードは VM 上で動きます。VM も仕様が与えられるので、最初に自分で書きます。
惑星の重力をうまく利用していかにシャトルの燃料消費を抑えるかとうがポイントだった気が。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www2010.icfpcontest.org/2010/task/"&gt;2010&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scala で参加。&lt;/p&gt;
&lt;p&gt;車とそれを動かすための燃料を設計する問題。最初に謎の3進数データを解析しないといけないのが大変。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://icfpc2011.blogspot.jp/2011/06/task-description-contest-starts-now.html"&gt;2011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scala で参加。&lt;/p&gt;
&lt;p&gt;「Magic the Gathering」 からインスパイアされた（であろう） 「Lamda: the Gathering」という対戦型カードゲームの AI をつくる問題。
基本カードとして SKI Combinator などが与えられるので、それらを上手く組み合わせて強いカード(スロット)をつくる必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://icfpcontest2012.wordpress.com/"&gt;2012&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scala で参加。&lt;a href="https://gist.github.com/hayatoito/3123427"&gt;Code&lt;/a&gt; (&lt;a href="https://plus.google.com/+HayatoIto/posts/JvydCvGrpAz"&gt;感想&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.google.co.jp/search?q=%E3%83%90%E3%83%AB%E3%83%80%E3%83%BC%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5"&gt;バルダーダッシュ&lt;/a&gt; （のような）問題の AI をつくる問題。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://icfpc2013.cloudapp.net/"&gt;2013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scala で参加。 &lt;a href="https://github.com/hayatoito/icfpc2013-kirakira/"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;入力と出力が与えられるので、それを満たすプログラム（式）を生成するプログラムをつくる問題。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20140728102535/http://icfpcontest.org/specification.html"&gt;2014&lt;/a&gt; (archive)&lt;/p&gt;
&lt;p&gt;Scala で参加。&lt;/p&gt;
&lt;p&gt;パックマンの AI をつくる問題。パックマン側とゴースト側の両方をつくる必要があります。
ただし GHost CPU (GHC) という仮想的な CPU （非常に限られたローレベルの命令セットしかサポートしていない）上で動かす必要があります。
直接 GHC Program を書くのは普通の人間には困難ですので、AI 自体はハイレベルな言語で書くようにして、
それを GHC Program に変換するコンパイラ等を自力で書くといった方針でないと、強い AI を書くのは実質不可能です。
Lisp っぽい言語を自分でつくって、それを GHC Program にコンパイルしている人が多かった気が。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://2015.icfpcontest.org/"&gt;2015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scala で参加。 &lt;a href="https://github.com/hayatoito/icfpc2015/"&gt;Code&lt;/a&gt; (&lt;a href="https://plus.google.com/+HayatoIto/posts/5xzjW21xGQU"&gt;感想&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;六角形のマスをつかったテトリスの AI をつくる問題。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://icfpc2016.blogspot.jp/2016/08/task-description.html"&gt;2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust で参加。 &lt;a href="https://github.com/hayatoito/icfpc2016-origami/"&gt;Repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;入力としてすでに折った後の折り紙の形が与えられます。折り方を見つけてくださいという問題。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://icfpcontest2017.github.io/"&gt;2017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2年連続 Rust で参加。 &lt;a href="https://github.com/hayatoito/icfp2017"&gt;Repository&lt;/a&gt;。&lt;a href="https://cdn.rawgit.com/hayatoito/icfp2017/6cb4a567/visualizer/index.html"&gt;Visualizer&lt;/a&gt;。&lt;a href="https://plus.google.com/+HayatoIto/posts/e1S3u7MQvqn"&gt;感想&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Undirected-Graph の Edge をターン制でとっていくn人Game。
いくつかのノードはラムダになっていて、ラムダから到達できるNodeごとにスコアが d * d 点加算。ただし、距離dは取っていないすべてのEdgeを使用して計算します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_21"&gt;動的言語しか使用したことがありません。静的言語も勉強したほうがよいですか? &lt;a name="dynamic-programming-language-is-dead"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これもよく聞かれる質問です。自分で考えましょう。問題解決にあたって最適な道具を選択するのも、ソフトウェアエンジニアにとって大事なスキルのひとつです。&lt;/p&gt;
&lt;p&gt;以下は私の（まとまっていない）意見です。&lt;/p&gt;
&lt;p&gt;動的言語の「動的」性がどうしても必要になるプログラムというのは1%もないのですが、実際はそれ以上の割合で動的言語が使用されています。&lt;/p&gt;
&lt;p&gt;人類が静的型チェックなしの動的スクリプト言語に費やしたこの20年くらいは、将来黒歴史として語り継がれるかもしれません。
「原理的に遅い」けれど「コンピュータの速度は毎年速くなるから大丈夫！」といった「言い訳」のセリフも今となっては、通用しなくなってしまいました。ムーアの法則も崩壊して、実在する動的言語技術を用いて実用的なブラウザやOSが書ける見込みはほぼゼロです。&lt;/p&gt;
&lt;p&gt;正しくコンピュータの知識を身につけて「無駄なく」利用するという「いわれてみれば当たり前」のことが今後より重要視されるようになるでしょう。
なんてことはない、もとの正常な状態に戻っただけです。&lt;/p&gt;
&lt;p&gt;「コンパイラ」技術や「ゼロコスト抽象化」といった技術は今後その価値が増す一方、それ以外の「コストが高い抽象化」の価値はどんどん失われていくことでしょう。&lt;/p&gt;
&lt;p&gt;「（速度はともかく）小規模なスクリプトだと静的言語より動的言語のほうが生産性が高いんです！」という主張も個人の限られた経験に基づくものがほとんどでたいていの場合疑ったほうがよいです。
この主張をする人で、そもそもモダンな型システムをもっている安全で生産性の高いプログラミング言語の習得に、動的言語と同じくらいの時間を投資したことのある人はほとんどいないです。&lt;/p&gt;
&lt;p&gt;生産性についてちゃんとした議論をするためには、「静的言語」と「動的言語」というあいまいな言葉を使わないで、より具体的な個々のプログラミング言語にきちんと向き合うべきです。&lt;/p&gt;
&lt;p&gt;いちサンプルとして、私は Python は10年以上、Rust は2年弱ほど使用していますが、小規模な使い捨て「スクリプト」を書くときも
すでに私はほとんどのユースケースにおいて Rust で書くほうが生産性が上になっています。&lt;/p&gt;
&lt;p&gt;ひとつの価値観にとらわれることなく、実際に自分で触れて経験して発見することはとても大事です。&lt;/p&gt;
&lt;h2 id="rust_3"&gt;使い捨てのスクリプト等でも Rust を使うって面倒じゃないですか？ &lt;a name="rust-as-scripting"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;そう思っていた時期がありました。しかし、Rust は &lt;code&gt;&amp;lt;crate_root&amp;gt;/src/bin&lt;/code&gt; 以下に &lt;code&gt;*.rs&lt;/code&gt; ファイルをおいておくだけで、それぞれの &lt;code&gt;*.rs&lt;/code&gt; をビルドして別の実行ファイルをつくってくれます。
たとえば my-hello-world "スクリプト" を書きたいと思ったら &lt;code&gt;&amp;lt;crate_root&amp;gt;/src/bin/my-hello-world.rs&lt;/code&gt; においておけば開発中は:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cargo run --bin my-hello-world [args...]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ですぐにテスト実行できます。 &lt;code&gt;&amp;lt;crate_root&amp;gt;/target/release&lt;/code&gt; に PATH を通しておけば&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cargo build --release
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と必要に応じてまとめてビルドしておくだけで、普段は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; my-hello-world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で普通に呼び出せるので完全にスクリプト感覚で使用できます。 &lt;code&gt;&amp;lt;crate_root&amp;gt;/src/bin&lt;/code&gt; の仕組みがなかったら、普段使いの"スクリプト"言語として Python を Rust で置き換えようとはきっと思わなかったでしょう。&lt;/p&gt;
&lt;h2 id="_22"&gt;初心者にプログラミングを教えるとき「変数は箱」は変ですか？ &lt;a name="variable-is-not-box"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;やめましょう。その例えは表現力に乏しく、ほとんどのケースにおいて不適切ですぐに破綻します。混乱の元です。&lt;/p&gt;
&lt;p&gt;オススメは最初からメモリをきちんと意識してもらうこと、これが一番の近道です。&lt;/p&gt;
&lt;p&gt;慣れないうちは、以下のようにメモリー上の「表」を自分で書いてみるのがよいです。大事なのは、それぞれの変数に対して address と value の「両方」を最初から意識することです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;address  variable  value
10:       mut a      0 (u8)
11:       mut b      1 (u8)
12:       mut a1    10 (&amp;amp;mut u8)
13:           a2    12 (&amp;amp;mut &amp;amp;mut u8)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;慣れてくると、コードを見るだけでこのような「表」が自然と頭の中で構築されるようになるでしょう。
関数呼び出しの際も「値渡し」「参照渡し」という曖昧な言葉を使うのはできるだけ避けて、最初からメモリ（スタック）を意識して理解するようにすれば、覚えなければいけない「ルール」はぐっと減ります。&lt;/p&gt;
&lt;p&gt;例えば以下のような、Rust のコードの場合:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;: &lt;span class="kt"&gt;u8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のようになります。変数の型はほとんどの場合省略できますがここではあえて書いています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;: &lt;span class="kt"&gt;u8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;: &lt;span class="kt"&gt;u8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="c1"&gt;// 10:       mut a      0 (u8)&lt;/span&gt;
&lt;span class="c1"&gt;// 11:       mut b      1 (u8)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 10:       mut a      0 (u8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 11:       mut b      1 (u8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 12:       mut a1    10 (&amp;amp;mut u8)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 10:       mut a      0 (u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 11:       mut b      1 (u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 12:       mut a1    10 (&amp;amp;mut u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 13:           a2    12 (&amp;amp;mut &amp;amp;mut u8)&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 10:       mut a      2 (u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 11:       mut b      1 (u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 12:       mut a1    10 (&amp;amp;mut u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 13:           a2    12 (&amp;amp;mut &amp;amp;mut u8)&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 10:       mut a      2 (u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 11:       mut b      1 (u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 12:       mut a1    11 (&amp;amp;mut u8)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 13:           a2    12 (&amp;amp;mut &amp;amp;mut u8)&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 10:       mut a      2 (u8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 11:       mut b      1 (u8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 12:       mut a1    11 (&amp;amp;mut u8)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 10:       mut a      2 (u8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 11:       mut b      3 (u8)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 12:       mut a1    11 (&amp;amp;mut u8)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// address  variable  value&lt;/span&gt;
&lt;span class="c1"&gt;// 10:       mut a      2 (u8)&lt;/span&gt;
&lt;span class="c1"&gt;// 11:       mut b      3 (u8)&lt;/span&gt;

&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;address の値はここでは適当です。他と区別するのに必要十分であればOKです。&lt;/li&gt;
&lt;li&gt;上の表の &lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;&amp;amp;mut u8&lt;/code&gt; など各変数の型や型のサイズも意識するとよいです。
  上の例でいえば、&lt;code&gt;u8&lt;/code&gt; は 1 byte、&lt;code&gt;&amp;amp;mut u8&lt;/code&gt; などの 「ポインタ」 は 64bit architecture だと 8 bytes です。address の「間隔」も本来であれば型のサイズで調整します。&lt;/li&gt;
&lt;li&gt;実際はスタックに加えてヒープも意識する必要があります。例えば Java だと Primitive Type 以外はヒープにアロケートされます。常にヒープの表とスタックの表の両方を（最初のうちは）書くようにしましょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この FAQ エントリは、何度も同じ説明をホワイトボードに書くのがつらくなったため参照してもらうために書きました。&lt;/p&gt;
&lt;p&gt;Todo: ヒープの例を追加。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;「プログラミングとはメモリの Syntax Sugar である。」&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="_23"&gt;開発環境 &lt;a name="dev-env"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_24"&gt;キーボードは何を使用していますか？ &lt;a name="keyboard"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/accessories/en-us/business/sculpt-ergonomic-keyboard-for-business/5kv-00001"&gt;Sculpt Ergonomic Keyboard for Business&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;このキーボード（US配列版）は残念ながら日本では販売していません。&lt;/p&gt;
&lt;h2 id="_25"&gt;おすすめのエディタは？ &lt;a name="recommended-editor"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ないです。&lt;/p&gt;
&lt;h2 id="_26"&gt;エディタは何を使用してますか？ &lt;a name="editor"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;（Scala 以外は） Emacs。C++ は Eclipse CDT も使用します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ちなみに観測範囲においては Google のソフトウェアエンジニアは (Java や Objective-C を書く人を除くと）Emacs を使う人がほとんどです。Emacs ユーザーの割合は 80% を超えると思います。&lt;/p&gt;
&lt;h2 id="emacs"&gt;Emacs で使用しているパッケージは？ &lt;a name="emacs"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用している e-lisp library をひとつひとつ挙げるのはとても難しいです...。
Emacs に標準で付属していない・自分でインストールしたパッケージなら、リストにするのは簡単にできます。以下の通りです。&lt;/p&gt;
&lt;p&gt;★ が付いているのは、特定の言語用の Major Mode ではなく、汎用的に使用する・オススメできるものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ace-window&lt;/li&gt;
&lt;li&gt;avy&lt;/li&gt;
&lt;li&gt;back-button&lt;/li&gt;
&lt;li&gt;bind-key&lt;/li&gt;
&lt;li&gt;c-eldoc&lt;/li&gt;
&lt;li&gt;company ★&lt;/li&gt;
&lt;li&gt;company-jedi&lt;/li&gt;
&lt;li&gt;company-statistics&lt;/li&gt;
&lt;li&gt;company-tern&lt;/li&gt;
&lt;li&gt;company-web&lt;/li&gt;
&lt;li&gt;counsel ★&lt;/li&gt;
&lt;li&gt;easy-repeat&lt;/li&gt;
&lt;li&gt;epc&lt;/li&gt;
&lt;li&gt;exec-path-from-shell&lt;/li&gt;
&lt;li&gt;expand-region&lt;/li&gt;
&lt;li&gt;flycheck ★&lt;/li&gt;
&lt;li&gt;ggtags&lt;/li&gt;
&lt;li&gt;git-gutter+&lt;/li&gt;
&lt;li&gt;haskell-mode&lt;/li&gt;
&lt;li&gt;htmlize&lt;/li&gt;
&lt;li&gt;imenu-anywhere&lt;/li&gt;
&lt;li&gt;ivy ★&lt;/li&gt;
&lt;li&gt;jedi-core&lt;/li&gt;
&lt;li&gt;jinja2-mode&lt;/li&gt;
&lt;li&gt;js2-mode,&lt;/li&gt;
&lt;li&gt;magit ★&lt;/li&gt;
&lt;li&gt;markdown-mode&lt;/li&gt;
&lt;li&gt;multiple-cursors ★&lt;/li&gt;
&lt;li&gt;racer&lt;/li&gt;
&lt;li&gt;rainbow-delimiters&lt;/li&gt;
&lt;li&gt;rtags&lt;/li&gt;
&lt;li&gt;rust-mode&lt;/li&gt;
&lt;li&gt;scala-mode2&lt;/li&gt;
&lt;li&gt;smart-mode-line&lt;/li&gt;
&lt;li&gt;swiper ★&lt;/li&gt;
&lt;li&gt;term+&lt;/li&gt;
&lt;li&gt;tern&lt;/li&gt;
&lt;li&gt;undo-tree&lt;/li&gt;
&lt;li&gt;visual-regexp&lt;/li&gt;
&lt;li&gt;web-mode&lt;/li&gt;
&lt;li&gt;wgrep ★&lt;/li&gt;
&lt;li&gt;which-key&lt;/li&gt;
&lt;li&gt;yaml-mode&lt;/li&gt;
&lt;li&gt;yasnippet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="emacs-1"&gt;Emacs の設定ファイルが1万行くらいあると聞いたのですがほんとうですか？ &lt;a name="emacs-el"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一時期そういう噂が流れましたが、いまはぐっと減っていると思います。安心してください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;2016-12-15 Thu&amp;gt;&lt;/code&gt; 数えてみたところ、たったの 5,000 行でした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc emacs/*.el
     &lt;span class="m"&gt;330&lt;/span&gt;    &lt;span class="m"&gt;1412&lt;/span&gt;   &lt;span class="m"&gt;17854&lt;/span&gt; emacs/custom.el
     &lt;span class="m"&gt;471&lt;/span&gt;    &lt;span class="m"&gt;1166&lt;/span&gt;   &lt;span class="m"&gt;13912&lt;/span&gt; emacs/emacs.el
      &lt;span class="m"&gt;17&lt;/span&gt;      &lt;span class="m"&gt;52&lt;/span&gt;     &lt;span class="m"&gt;459&lt;/span&gt; emacs/my-ace-window.el
      &lt;span class="m"&gt;74&lt;/span&gt;     &lt;span class="m"&gt;316&lt;/span&gt;    &lt;span class="m"&gt;3137&lt;/span&gt; emacs/my-ansi-color.el
      &lt;span class="m"&gt;25&lt;/span&gt;      &lt;span class="m"&gt;72&lt;/span&gt;     &lt;span class="m"&gt;869&lt;/span&gt; emacs/my-auto-insert.el
      &lt;span class="m"&gt;32&lt;/span&gt;      &lt;span class="m"&gt;84&lt;/span&gt;    &lt;span class="m"&gt;1142&lt;/span&gt; emacs/my-back-button.el
      &lt;span class="m"&gt;34&lt;/span&gt;     &lt;span class="m"&gt;121&lt;/span&gt;    &lt;span class="m"&gt;1224&lt;/span&gt; emacs/my-bookmark.el
      &lt;span class="m"&gt;21&lt;/span&gt;      &lt;span class="m"&gt;42&lt;/span&gt;     &lt;span class="m"&gt;505&lt;/span&gt; emacs/my-browse-url.el
      &lt;span class="m"&gt;59&lt;/span&gt;     &lt;span class="m"&gt;130&lt;/span&gt;    &lt;span class="m"&gt;1673&lt;/span&gt; emacs/my-cc.el
     &lt;span class="m"&gt;193&lt;/span&gt;     &lt;span class="m"&gt;521&lt;/span&gt;    &lt;span class="m"&gt;7040&lt;/span&gt; emacs/my-chrome.el
      &lt;span class="m"&gt;52&lt;/span&gt;     &lt;span class="m"&gt;131&lt;/span&gt;    &lt;span class="m"&gt;1713&lt;/span&gt; emacs/my-clipboard-sync.el
     &lt;span class="m"&gt;113&lt;/span&gt;     &lt;span class="m"&gt;236&lt;/span&gt;    &lt;span class="m"&gt;3419&lt;/span&gt; emacs/my-company.el
      &lt;span class="m"&gt;67&lt;/span&gt;     &lt;span class="m"&gt;170&lt;/span&gt;    &lt;span class="m"&gt;2546&lt;/span&gt; emacs/my-compile.el
     &lt;span class="m"&gt;129&lt;/span&gt;     &lt;span class="m"&gt;372&lt;/span&gt;    &lt;span class="m"&gt;4947&lt;/span&gt; emacs/my-counsel.el
      &lt;span class="m"&gt;41&lt;/span&gt;     &lt;span class="m"&gt;124&lt;/span&gt;    &lt;span class="m"&gt;1275&lt;/span&gt; emacs/my-dabbrev.el
      &lt;span class="m"&gt;65&lt;/span&gt;     &lt;span class="m"&gt;196&lt;/span&gt;    &lt;span class="m"&gt;2568&lt;/span&gt; emacs/my-dir-locals.el
      &lt;span class="m"&gt;99&lt;/span&gt;     &lt;span class="m"&gt;247&lt;/span&gt;    &lt;span class="m"&gt;2993&lt;/span&gt; emacs/my-dired.el
      &lt;span class="m"&gt;17&lt;/span&gt;      &lt;span class="m"&gt;46&lt;/span&gt;     &lt;span class="m"&gt;482&lt;/span&gt; emacs/my-dumb-jump.el
      &lt;span class="m"&gt;20&lt;/span&gt;      &lt;span class="m"&gt;30&lt;/span&gt;     &lt;span class="m"&gt;430&lt;/span&gt; emacs/my-easy-repeat.el
      &lt;span class="m"&gt;56&lt;/span&gt;     &lt;span class="m"&gt;153&lt;/span&gt;    &lt;span class="m"&gt;2002&lt;/span&gt; emacs/my-ediff.el
      &lt;span class="m"&gt;84&lt;/span&gt;     &lt;span class="m"&gt;218&lt;/span&gt;    &lt;span class="m"&gt;2548&lt;/span&gt; emacs/my-emacs-lisp.el
      &lt;span class="m"&gt;23&lt;/span&gt;      &lt;span class="m"&gt;53&lt;/span&gt;     &lt;span class="m"&gt;786&lt;/span&gt; emacs/my-exec-path-from-shell.el
       &lt;span class="m"&gt;7&lt;/span&gt;      &lt;span class="m"&gt;12&lt;/span&gt;     &lt;span class="m"&gt;131&lt;/span&gt; emacs/my-expand-region.el
      &lt;span class="m"&gt;60&lt;/span&gt;     &lt;span class="m"&gt;157&lt;/span&gt;    &lt;span class="m"&gt;2160&lt;/span&gt; emacs/my-filecache.el
      &lt;span class="m"&gt;36&lt;/span&gt;      &lt;span class="m"&gt;78&lt;/span&gt;    &lt;span class="m"&gt;1115&lt;/span&gt; emacs/my-flycheck.el
     &lt;span class="m"&gt;105&lt;/span&gt;     &lt;span class="m"&gt;283&lt;/span&gt;    &lt;span class="m"&gt;3366&lt;/span&gt; emacs/my-frame.el
       &lt;span class="m"&gt;7&lt;/span&gt;      &lt;span class="m"&gt;12&lt;/span&gt;     &lt;span class="m"&gt;115&lt;/span&gt; emacs/my-ggtags.el
      &lt;span class="m"&gt;13&lt;/span&gt;      &lt;span class="m"&gt;26&lt;/span&gt;     &lt;span class="m"&gt;272&lt;/span&gt; emacs/my-go.el
      &lt;span class="m"&gt;42&lt;/span&gt;     &lt;span class="m"&gt;101&lt;/span&gt;    &lt;span class="m"&gt;1127&lt;/span&gt; emacs/my-google3.el
      &lt;span class="m"&gt;12&lt;/span&gt;      &lt;span class="m"&gt;19&lt;/span&gt;     &lt;span class="m"&gt;221&lt;/span&gt; emacs/my-haskell.el
      &lt;span class="m"&gt;69&lt;/span&gt;     &lt;span class="m"&gt;163&lt;/span&gt;    &lt;span class="m"&gt;2038&lt;/span&gt; emacs/my-helm.el
      &lt;span class="m"&gt;36&lt;/span&gt;      &lt;span class="m"&gt;96&lt;/span&gt;     &lt;span class="m"&gt;896&lt;/span&gt; emacs/my-hydra.el
      &lt;span class="m"&gt;29&lt;/span&gt;      &lt;span class="m"&gt;80&lt;/span&gt;     &lt;span class="m"&gt;876&lt;/span&gt; emacs/my-imenu-anywhere.el
      &lt;span class="m"&gt;38&lt;/span&gt;      &lt;span class="m"&gt;84&lt;/span&gt;     &lt;span class="m"&gt;893&lt;/span&gt; emacs/my-init.el
      &lt;span class="m"&gt;60&lt;/span&gt;     &lt;span class="m"&gt;169&lt;/span&gt;    &lt;span class="m"&gt;1878&lt;/span&gt; emacs/my-ivy.el
      &lt;span class="m"&gt;64&lt;/span&gt;     &lt;span class="m"&gt;185&lt;/span&gt;    &lt;span class="m"&gt;1796&lt;/span&gt; emacs/my-js2.el
     &lt;span class="m"&gt;102&lt;/span&gt;     &lt;span class="m"&gt;269&lt;/span&gt;    &lt;span class="m"&gt;3181&lt;/span&gt; emacs/my-kings-viking.el
      &lt;span class="m"&gt;14&lt;/span&gt;      &lt;span class="m"&gt;45&lt;/span&gt;     &lt;span class="m"&gt;460&lt;/span&gt; emacs/my-linux.el
      &lt;span class="m"&gt;27&lt;/span&gt;      &lt;span class="m"&gt;84&lt;/span&gt;     &lt;span class="m"&gt;717&lt;/span&gt; emacs/my-mac-ns.el
      &lt;span class="m"&gt;16&lt;/span&gt;      &lt;span class="m"&gt;42&lt;/span&gt;     &lt;span class="m"&gt;514&lt;/span&gt; emacs/my-mac.el
      &lt;span class="m"&gt;47&lt;/span&gt;      &lt;span class="m"&gt;95&lt;/span&gt;    &lt;span class="m"&gt;1195&lt;/span&gt; emacs/my-magit.el
      &lt;span class="m"&gt;26&lt;/span&gt;      &lt;span class="m"&gt;69&lt;/span&gt;     &lt;span class="m"&gt;708&lt;/span&gt; emacs/my-markdown.el
     &lt;span class="m"&gt;331&lt;/span&gt;     &lt;span class="m"&gt;971&lt;/span&gt;   &lt;span class="m"&gt;10738&lt;/span&gt; emacs/my-memo.el
      &lt;span class="m"&gt;89&lt;/span&gt;     &lt;span class="m"&gt;245&lt;/span&gt;    &lt;span class="m"&gt;3007&lt;/span&gt; emacs/my-nxml.el
     &lt;span class="m"&gt;267&lt;/span&gt;     &lt;span class="m"&gt;777&lt;/span&gt;    &lt;span class="m"&gt;9537&lt;/span&gt; emacs/my-org.el
      &lt;span class="m"&gt;19&lt;/span&gt;      &lt;span class="m"&gt;34&lt;/span&gt;     &lt;span class="m"&gt;370&lt;/span&gt; emacs/my-outline.el
     &lt;span class="m"&gt;155&lt;/span&gt;     &lt;span class="m"&gt;424&lt;/span&gt;    &lt;span class="m"&gt;5922&lt;/span&gt; emacs/my-perspective.el
      &lt;span class="m"&gt;13&lt;/span&gt;      &lt;span class="m"&gt;34&lt;/span&gt;     &lt;span class="m"&gt;352&lt;/span&gt; emacs/my-platform.el
      &lt;span class="m"&gt;52&lt;/span&gt;     &lt;span class="m"&gt;117&lt;/span&gt;    &lt;span class="m"&gt;1322&lt;/span&gt; emacs/my-python.el
      &lt;span class="m"&gt;24&lt;/span&gt;      &lt;span class="m"&gt;41&lt;/span&gt;     &lt;span class="m"&gt;532&lt;/span&gt; emacs/my-rescue.el
     &lt;span class="m"&gt;164&lt;/span&gt;     &lt;span class="m"&gt;516&lt;/span&gt;    &lt;span class="m"&gt;5842&lt;/span&gt; emacs/my-rtags.el
     &lt;span class="m"&gt;120&lt;/span&gt;     &lt;span class="m"&gt;313&lt;/span&gt;    &lt;span class="m"&gt;3926&lt;/span&gt; emacs/my-rust.el
      &lt;span class="m"&gt;81&lt;/span&gt;     &lt;span class="m"&gt;223&lt;/span&gt;    &lt;span class="m"&gt;2769&lt;/span&gt; emacs/my-scala.el
      &lt;span class="m"&gt;27&lt;/span&gt;      &lt;span class="m"&gt;55&lt;/span&gt;     &lt;span class="m"&gt;500&lt;/span&gt; emacs/my-scratch.el
      &lt;span class="m"&gt;44&lt;/span&gt;     &lt;span class="m"&gt;130&lt;/span&gt;    &lt;span class="m"&gt;1400&lt;/span&gt; emacs/my-shackle.el
      &lt;span class="m"&gt;27&lt;/span&gt;      &lt;span class="m"&gt;65&lt;/span&gt;     &lt;span class="m"&gt;933&lt;/span&gt; emacs/my-smart-mode-line.el
       &lt;span class="m"&gt;6&lt;/span&gt;      &lt;span class="m"&gt;11&lt;/span&gt;     &lt;span class="m"&gt;118&lt;/span&gt; emacs/my-smartparens.el
      &lt;span class="m"&gt;54&lt;/span&gt;     &lt;span class="m"&gt;133&lt;/span&gt;    &lt;span class="m"&gt;1657&lt;/span&gt; emacs/my-swiper.el
      &lt;span class="m"&gt;76&lt;/span&gt;     &lt;span class="m"&gt;257&lt;/span&gt;    &lt;span class="m"&gt;2300&lt;/span&gt; emacs/my-term.el
      &lt;span class="m"&gt;19&lt;/span&gt;      &lt;span class="m"&gt;54&lt;/span&gt;     &lt;span class="m"&gt;656&lt;/span&gt; emacs/my-undo-tree.el
     &lt;span class="m"&gt;476&lt;/span&gt;    &lt;span class="m"&gt;1197&lt;/span&gt;   &lt;span class="m"&gt;15433&lt;/span&gt; emacs/my-util.el
     &lt;span class="m"&gt;106&lt;/span&gt;     &lt;span class="m"&gt;300&lt;/span&gt;    &lt;span class="m"&gt;3727&lt;/span&gt; emacs/my-web.el
      &lt;span class="m"&gt;17&lt;/span&gt;      &lt;span class="m"&gt;31&lt;/span&gt;     &lt;span class="m"&gt;419&lt;/span&gt; emacs/my-wgrep.el
     &lt;span class="m"&gt;151&lt;/span&gt;     &lt;span class="m"&gt;480&lt;/span&gt;    &lt;span class="m"&gt;6780&lt;/span&gt; emacs/my-workaround.el
      &lt;span class="m"&gt;54&lt;/span&gt;     &lt;span class="m"&gt;116&lt;/span&gt;    &lt;span class="m"&gt;1480&lt;/span&gt; emacs/my-xterm-color.el
      &lt;span class="m"&gt;34&lt;/span&gt;      &lt;span class="m"&gt;73&lt;/span&gt;     &lt;span class="m"&gt;895&lt;/span&gt; emacs/my-yasnippet.el
    &lt;span class="m"&gt;5238&lt;/span&gt;   &lt;span class="m"&gt;14558&lt;/span&gt;  &lt;span class="m"&gt;177798&lt;/span&gt; total
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="emacs_1"&gt;Emacs の設定ファイルを公開する予定はありますか？ &lt;a name="emacs-el-publish"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ありません。&lt;/p&gt;
&lt;h2 id="python"&gt;Python の開発環境は? &lt;a name="python-dev"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emacs (python-mode, jedi-mode, company-mode, flycheck, flycheck-mypy)&lt;/li&gt;
&lt;li&gt;mypy, ipython, pyenv, flake8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="html-css-javascript"&gt;HTML / CSS / JavaScript の開発環境は? &lt;a name="web-dev"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emacs (web-mode, nxml-mode, js2-mode, tern-mode, flycheck)&lt;/li&gt;
&lt;li&gt;babel, eslint, csslint, tidy-html5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="c"&gt;C++ の開発環境は? &lt;a name="cpp-dev"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Emacs (cc-mode, &lt;a href="https://github.com/Andersbakken/rtags"&gt;rtags&lt;/a&gt;, flycheck-rtags, company-rtags)&lt;/p&gt;
&lt;p&gt;rtags はとてもオススメです。&lt;/p&gt;
&lt;p&gt;ビルドツールである ninja や CMake は &lt;a href="http://clang.llvm.org/docs/JSONCompilationDatabase.html"&gt;JSON Compilation Database Format Specification&lt;/a&gt; を出力できます。
rtags はこの情報をもとにコードを解析するので、シンボル・ジャンプや補完がほぼ正確です。
私も実際に Blink の開発で使用しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://eclipse.org/cdt/"&gt;Eclipse CDT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;なぜかあまり有名でないけれど、Eclipse CDT も相当便利です。
巨大なレポジトリに対して使用するにはちょっとしたコツがいるのですけど、
Mozilla のドキュメント (&lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Eclipse/Eclipse_CDT"&gt;Eclipse CDT&lt;/a&gt;) や、
Chromium のドキュメント (&lt;a href="https://chromium.googlesource.com/chromium/src/+/lkcr/docs/linux_eclipse_dev.md"&gt;Linux Eclipse Dev&lt;/a&gt;)
が参考になるかもです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build: &lt;a href="https://waf.io/"&gt;waf&lt;/a&gt; / make /  &lt;a href="https://chromium.googlesource.com/chromium/src/tools/gn/"&gt;gn&lt;/a&gt; + &lt;a href="https://ninja-build.org/"&gt;ninja&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust_4"&gt;Rust の開発環境は? &lt;a name="rust-dev"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Emacs (rust-mode, &lt;a href="https://github.com/phildawes/racer"&gt;racer&lt;/a&gt;, flycheck, company-mode)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang-nursery/rustup.rs"&gt;rustup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="scala"&gt;Scala の開発環境は? &lt;a name="scala-dev"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sbt&lt;/li&gt;
&lt;li&gt;Eclipse (&lt;a href="http://scala-ide.org/"&gt;Scala IDE&lt;/a&gt;) (+ &lt;a href="http://www.mulgasoft.com/"&gt;Emacs+ Eclipse plugin&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_27"&gt;メモ はどのようにとってますか？ &lt;a name="memo"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Emacs + org-mode (アウトラインエディタとして) + org-babel (コード実行できるメモ環境として)。&lt;/p&gt;
&lt;p&gt;アウトラインエディタはとても重要です。Todo やメモなどはすべて アウトラインエディタ ( Emacs + org-mode ) で管理しています。&lt;/p&gt;
&lt;h1 id="_28"&gt;オススメの本や勉強方法 &lt;a name="study"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;基本的に人にオススメとかはしないです。自分で見つけましょう。&lt;/p&gt;
&lt;p&gt;以下は単なる私の感想です。&lt;/p&gt;
&lt;h2 id="_29"&gt;オススメの本は？ &lt;a name="book"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://mitpress.mit.edu/sicp/"&gt;SICP: Structure and Interpretation of Computer Programs&lt;/a&gt;: ★★★★★★★&lt;/p&gt;
&lt;p&gt;名著です。カバーする範囲はとても多岐に渡ります。大好きな本です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/1133187811/"&gt;Introduction to the Theory of Computation&lt;/a&gt;: ★★★★★&lt;/p&gt;
&lt;p&gt;実用性はあまりないのかもしれませんが、とても面白いです。「計算するとはいったいどういうことか？」ということを、「証明の力」で鮮やかに切っていきます。
私はこの手の本を読むのがわりと好きだったりします。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Concrete-Mathematics-Foundation-Computer-Science/dp/0201558025"&gt;Concreate Mathematics&lt;/a&gt;: ★★★★&lt;/p&gt;
&lt;p&gt;Knuth 先生の隠れた名著。離散数学楽しいです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/C-Programming-Language-Bjarne-Stroustrup-ebook/dp/B00DUW4BMS/"&gt;The C++ Programming Language, 4th Edition&lt;/a&gt;: ★★★★&lt;/p&gt;
&lt;p&gt;C++ 11 に関しての知識が足りないな―と思って読んだ本です。なんといっても、著者は、C++ の作者である Stroustrup さんです。
古い仕様にとらわれず、最初から C++ 11 の機能をきっちり使っていきます。最初のほうはチュートリアル形式で解説していくので、C++ の初学書にも実はよいのかもしれません。
そのあまりのボリュームのためぜんぶ読むのは大変なのですが、C++ 好きなら読むのを苦痛に感じることはなく楽しく読めると思います。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/dp/B00PGCMGDQ/"&gt;Effective Modern C++&lt;/a&gt;: ★★&lt;/p&gt;
&lt;p&gt;（Effective C++ と比較した場合）ちょっと重箱の隅をつつきすぎ、という感想をもってはいけないのかもしれませんが、ちょっと蛇足が多いかなーと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://shop.oreilly.com/product/0636920040385.do"&gt;Programming Rust&lt;/a&gt;: TODO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/0201543303"&gt;The Design and Evolution of C++&lt;/a&gt;: ★★★★&lt;/p&gt;
&lt;p&gt;これも Stroustrup さんの本です。技術書というより歴史的な読み物です。C++ 使いなら、涙なしでは読むことのできないノン・フィクションです。
とても共感できます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/API-Design-C-Martin-Reddy-ebook/dp/B004NNUZ6O/"&gt;API Design for C++&lt;/a&gt;: ★★&lt;/p&gt;
&lt;p&gt;楽しみにしていたものの、わりと当たり前のことしか書いてなかった気がします。そのため、ほとんど内容を覚えていないです...。ごめんなさい。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Code-Complete-Developer-Best-Practices-ebook/dp/B00JDMPOSY/"&gt;Code Complete (Developer Best Practices)&lt;/a&gt;: ★★★&lt;/p&gt;
&lt;p&gt;これも当たり前のことしか書いてなかった気がします。そのため、あまり印象にのこっていないです...。
当たり前のことを当たり前に身につけるにはとてもいいショートカットになるのかも。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Programming-Scala-Comprehensive-Step---Step-ebook/dp/B004Z1FTXS/"&gt;Programming in Scala: A Comprehensive Step-by-Step Guide&lt;/a&gt;: ★★★★&lt;/p&gt;
&lt;p&gt;Scala をはじめたときに一通りの知識を身につけるため読みました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Hacking-Art-Exploitation-ebook/dp/B004OEJN3I/"&gt;Hacking: The Art of the Exploitation&lt;/a&gt; ★★★★&lt;/p&gt;
&lt;p&gt;ハッキングは芸術です。「こんな本、他に誰が読むんだろう」と思っていたら、以外に Amazon.com などでの順位が高くて、びっくりした覚えがあります...。
前半部分がとてもよいです。特に3章。1章、2章でつくったプログラムには実は脆弱性があって、3章ではそこをついて、特権を奪っていく過程がとてもエキサイティングです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Types-Programming-Languages-Benjamin-Pierce-ebook/dp/B00AJXZ5JE/"&gt;Types and Programming Languages&lt;/a&gt;: ★★★★★&lt;/p&gt;
&lt;p&gt;型理論は、コンピュータ・サイエンスの中でも理論が実際にとても役立っている貴重な分野のひとつだと思います。
TAPL では OCaml が使用されていますが、自分の好きな言語ですべての演習をやってみるというのもありだと思います。
私は以下の章は OCaml ではなく &lt;a href="https://github.com/hayatoito/tapl-in-rust"&gt;Rust で実装&lt;/a&gt;しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chapter 4: An ML Implementation of Arithmetic Expressions&lt;/li&gt;
&lt;li&gt;chapter 7: An ML Implementation of the Lambda-Calculus&lt;/li&gt;
&lt;li&gt;chapter 10: An ML Implementation of Simple Types&lt;/li&gt;
&lt;li&gt;chapter 17: An ML Implementation of Subtyping&lt;/li&gt;
&lt;li&gt;chapter 25: An ML Implementation of System F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653/"&gt;Functional Programming in Scala&lt;/a&gt;: ★★★★&lt;/p&gt;
&lt;p&gt;「関数型プログラミングとは！」とは頭の中で理解するものではなく体得するものです。この本はまさにそれに応えてくれます。
前半、いろいろなものを自作させられます。そして、後半で、「ほーら、いままで作ってきたものは、全部、同じような類似点があったでしょ。それが、モ・ナ・ド♡」と優しく教えてくれます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO: 追加する&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="coursera-udacity"&gt;Coursera や Udacity でのおすすめの オンラインのコースは？ &lt;a name="course"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.udacity.com/course/intro-to-artificial-intelligence--cs271"&gt;Intro to Artificial Intelligence&lt;/a&gt;: ★&lt;/p&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/+HayatoIto/posts/GxdKuvVsN5E"&gt;感想&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.coursera.org/course/compilers"&gt;Compilers&lt;/a&gt;: ★★★★&lt;/p&gt;
&lt;p&gt;COOL という Mini Object Oriented Language のコンパイラをつくるコースです。一度もコンパイラをつくったことがないのなら、とても楽しいと思います。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.coursera.org/course/optimization"&gt;Discreate Optimization&lt;/a&gt;: ★★★&lt;/p&gt;
&lt;p&gt;離散最適化に関する数々の理論とテクニックを学べます。なんといっても、講師の先生がノリノリです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO: 他のコースを追加。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python_1"&gt;Python のオススメの勉強方法は? &lt;a name="python-study"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/"&gt;The Python Tutorial&lt;/a&gt; :  ★★★★★&lt;/p&gt;
&lt;p&gt;Python は公式のチュートリアルがとてもよいので、これだけ読めば最初は十分です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="haskell"&gt;Haskell のオススメの勉強方法は? &lt;a name="haskell-study"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell for Great Good!&lt;/a&gt;: ★★★★★&lt;/p&gt;
&lt;p&gt;最初は圧倒的にこれがオススメです。Haskell そのものは学ぶつもりはないけれど、「関数型プログラミングの考え方」だけはきちんと理解したいという人にもよいかもしれません。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="scala_1"&gt;Scala のオススメの勉強方法は? &lt;a name="scala-study"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TODO: 書きます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust_5"&gt;Rust のオススメの勉強方法は?  &lt;a name="rust-study"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TODO: 落ち着いたら書きます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_30"&gt;ソフトウェア・エンジニアリング &lt;a name="software-engineering"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="xxx-google"&gt;XXX を Google では行っていますか？ &lt;a name="xxx-at-google"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;テスト駆動開発: 「テスト駆動開発」という言葉が普段の会話にでてくることはありません。テストを書くのは当たり前のことですが、わざわざ「テスト駆動開発」のような大袈裟な言い方はしません。&lt;/li&gt;
&lt;li&gt;ペアプログラミング: している人ほぼいません。XP(eXtreme Programming)とかペアプログラミングとかはまったく流行ることなく見事に死んでいった印象しかありません。忘れましょう。&lt;/li&gt;
&lt;li&gt;コードレビュー: しています。必須です。&lt;/li&gt;
&lt;li&gt;オブジェクト指向: 「オブジェクト指向」というい言葉が会話にでてくることはまずありません。「ここはオブジェクト指向っぽくない」のようなレビューコメントは見たことないです。レビューではもっと具体的に指摘します。&lt;/li&gt;
&lt;li&gt;LGTM画像: レビューで LGTM は使っていますが、LGTM を出すときに LGTM 画像を貼るような人はいません。そこに遊び心はいらないです。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://diamond.jp/articles/-/91707"&gt;みんなヨガ・瞑想をしている&lt;/a&gt;: してません。&lt;/li&gt;
&lt;li&gt;PM (Product Manager): PMがいないチームで結果を出しているチームは多くあります。PMなしでうまくいくに越したことはありません。PMが必要になるケースはもちろんあります。&lt;/li&gt;
&lt;li&gt;バランスボールに座っている: 座っていません。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dot.asahi.com/dol/2017062600061.html"&gt;グーグル社員はなぜメールを使わないのか&lt;/a&gt;: 使います。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_31"&gt;その他 &lt;a name="misc"&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="_32"&gt;タイトルの「六本木ではたらく」とかあたま悪そうなのでやめたほうがいいです。&lt;a name="roppongi"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ほんとそう思います。気にしているんですからそこは触れないでください。ほんとすいません。とある事情で...。&lt;/p&gt;</content></entry><entry><title>What's New in Shadow DOM v1 (by examples)</title><link href="https://hayato.io/2016/shadowdomv1/" rel="alternate"></link><published>2016-06-22T00:00:00+09:00</published><updated>2016-06-22T00:00:00+09:00</updated><author><name>Hayato Ito (hayato@google.com)</name></author><id>tag:hayato.io,2016-06-22:/2016/shadowdomv1/</id><summary type="html">&lt;p&gt;This document is my attempt to track the difference between Shadow DOM v0 and v1.&lt;/p&gt;
&lt;p&gt;This is not a tutorial for Shadow DOM. Rather, this is my attempt to provide a guide for those who are already familiar with Shadow DOM v0 and want to migrate their components to v1 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This document is my attempt to track the difference between Shadow DOM v0 and v1.&lt;/p&gt;
&lt;p&gt;This is not a tutorial for Shadow DOM. Rather, this is my attempt to provide a guide for those who are already familiar with Shadow DOM v0 and want to migrate their components to v1.
This guide should be considered work-in-progress. I will make my best efforts to maintain this guide.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Last update date: &lt;code&gt;&amp;lt;2016-10-05 Wed&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="creating-a-shadow-root"&gt;Creating a shadow root&lt;/h1&gt;
&lt;h2 id="v0"&gt;v0&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;Element.createShadowRoot()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShadowRoot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="v1"&gt;v1&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;Element.attachShadow({ mode: 'open' })&lt;/code&gt; for an &lt;em&gt;open&lt;/em&gt; shadow root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use &lt;code&gt;Element.attachShadow({ mode: 'closed' })&lt;/code&gt; for a &lt;em&gt;closed&lt;/em&gt; shadow root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;closed&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="article-danger"&gt;
A &lt;code&gt;mode&lt;/code&gt; is mandatory in v1.
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// let shadowRoot = e.attachShadow(); // Throws an exception because `mode` is not given.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="multiple-shadow-roots"&gt;Multiple Shadow Roots&lt;/h1&gt;
&lt;h2 id="v0_1"&gt;v0&lt;/h2&gt;
&lt;p&gt;Supported.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;olderShadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShadowRoot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;youngerShadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createShadowRoot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// It&amp;#39;s okay. A shadow host can host more than one shadow roots.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="article-danger"&gt;
Though multiple shadow roots were originally introduced to support an &lt;em&gt;Inheritance Model&lt;/em&gt; for components,
Blink has already deprecated this feature even in v0. Do not use multiple shadow roots.
&lt;/div&gt;

&lt;h2 id="v1_1"&gt;v1&lt;/h2&gt;
&lt;p&gt;No longer supported.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// let another = e.attachShadow({ mode: &amp;#39;open&amp;#39; });  // Error.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="a-closed-shadow-root"&gt;A closed shadow root&lt;/h1&gt;
&lt;h2 id="v0_2"&gt;v0&lt;/h2&gt;
&lt;p&gt;A shadow root is always &lt;em&gt;open&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="v1_2"&gt;v1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;v1&lt;/em&gt; has a new kind of a shadow root, called &lt;em&gt;closed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The design goal of a &lt;em&gt;closed&lt;/em&gt; mode is to disallow any access to a node in a closed shadow root from an outside world.&lt;/p&gt;
&lt;p&gt;It is similar that a user's JavaScript can never access an &lt;em&gt;inside&lt;/em&gt; of a &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element in Google chrome.
A &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element is using a closed-mode shadow root in its implementation in Blink.&lt;/p&gt;
&lt;p&gt;Open:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// It&amp;#39;s okay. shadowHost.shadowRoot returns a shadow root if it is open.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Closed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// shadowHost.shadowRoot does not return the shadow root if it is closed.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following APIs are subject to this kind of constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Element.shadowRoot&lt;/li&gt;
&lt;li&gt;Element.assignedSlot&lt;/li&gt;
&lt;li&gt;TextNode.assignedSlot&lt;/li&gt;
&lt;li&gt;Event.composedPath()&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="article-info"&gt;
To be precise, a concept of a &lt;a href="https://dom.spec.whatwg.org/#concept-unclosed-node"&gt;unclosed node&lt;/a&gt; is used to decide its &lt;em&gt;visibility&lt;/em&gt; between two nodes.
A &lt;a href="https://dom.spec.whatwg.org/#concept-unclosed-node"&gt;unclosed node&lt;/a&gt; is a binary relation between two nodes.
&lt;/div&gt;

&lt;div class="article-danger"&gt;
Shadow DOM is not a security mechanism. Please do not use Shadow DOM if you want a security.
Nothing prevents &lt;code&gt;Element.prototype.attachShadow&lt;/code&gt; from being hijacked.
&lt;/div&gt;

&lt;h1 id="elements-which-can-be-a-shadow-host"&gt;Elements which can be a shadow host&lt;/h1&gt;
&lt;h2 id="v0_3"&gt;v0&lt;/h2&gt;
&lt;p&gt;Every element can be a shadow host, &lt;em&gt;theoretically&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createShadowRoot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createShadowRoot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Should be okay.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=article-danger&gt;
This is not real. We never successfully define proper semantics for every elements.
Thus, some of them do not work as intended. See this &lt;a href="https://github.com/w3c/webcomponents/issues/511#issuecomment-223851226"&gt;comment&lt;/a&gt; for the history.
Blink has already banned most of the supports.
&lt;/div&gt;

&lt;h2 id="v1_3"&gt;v1&lt;/h2&gt;
&lt;p&gt;A limited number of elements can be a shadow host.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// document.createElement(&amp;#39;input&amp;#39;).attachShadow({ mode: &amp;#39;open&amp;#39; });  // Error. `&amp;lt;input&amp;gt;` can not be a shadow host.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the definition of the &lt;a href="https://dom.spec.whatwg.org/#dom-element-attachshadow"&gt;attachShadow&lt;/a&gt; for the complete list of such elements.
Custom elements can be a shadow host.&lt;/p&gt;
&lt;h1 id="insertion-points-v0-vs-slots-v1"&gt;Insertion Points (v0) vs Slots (v1)&lt;/h1&gt;
&lt;h2 id="v0_4"&gt;v0&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;&amp;lt;content select=query&amp;gt;&lt;/code&gt; to select host's children. It can select host's children by CSS query selector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i1&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i2&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my-child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Insertion point&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#i1&lt;/td&gt;
&lt;td&gt;#c1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#i2&lt;/td&gt;
&lt;td&gt;#c2, #c3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#i3&lt;/td&gt;
&lt;td&gt;Empty&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The v0 also had &lt;code&gt;&amp;lt;shadow&amp;gt;&lt;/code&gt; insertion points, however, let me skip the explanation of &lt;code&gt;&amp;lt;shadow&amp;gt;&lt;/code&gt; because multiple shadow roots are deprecated.&lt;/p&gt;
&lt;h2 id="v1_4"&gt;v1&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; to select host's children. It selects host's children by &lt;em&gt;exact&lt;/em&gt; slot name matching.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c2&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree: --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s2&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slot&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#s1&lt;/td&gt;
&lt;td&gt;#c1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#s2&lt;/td&gt;
&lt;td&gt;#c2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#s3  (also known as the &lt;em&gt;"default slot"&lt;/em&gt;)&lt;/td&gt;
&lt;td&gt;#c3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="re-distribution-directly-v0-vs-indirectly-by-flattening-v1"&gt;Re-distribution: Directly (v0) vs Indirectly by flattening (v1)&lt;/h1&gt;
&lt;h2 id="v0_5"&gt;v0&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-splatoon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i1&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c4&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i2&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my-child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-splatoon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-splatoon&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i4&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#c3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i5&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i6&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Insertion point&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#i1&lt;/td&gt;
&lt;td&gt;#c1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#i2&lt;/td&gt;
&lt;td&gt;#c2, #c3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#i3&lt;/td&gt;
&lt;td&gt;Empty&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Insertion point&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#i4&lt;/td&gt;
&lt;td&gt;#c3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#i5&lt;/td&gt;
&lt;td&gt;#c1, #c4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#i6&lt;/td&gt;
&lt;td&gt;#c2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="v1_5"&gt;v1&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c2&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-splatoon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot1&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s2&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot2&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c4&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s3&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot6&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-splatoon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-splatoon&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s4&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s5&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s6&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;slot6&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slot&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#s1&lt;/td&gt;
&lt;td&gt;#c1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#s2&lt;/td&gt;
&lt;td&gt;#c2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#s3&lt;/td&gt;
&lt;td&gt;#c3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slot&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#s4&lt;/td&gt;
&lt;td&gt;#c1, #c2, #c4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#s5&lt;/td&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#s6&lt;/td&gt;
&lt;td&gt;#c3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can find another complex &lt;a href="http://w3c.github.io/webcomponents/spec/shadow/#flattening-example"&gt;example&lt;/a&gt;
in the Shadow DOM specification.&lt;/p&gt;
&lt;h1 id="fallback-contents"&gt;Fallback contents&lt;/h1&gt;
&lt;h2 id="v0_6"&gt;v0&lt;/h2&gt;
&lt;p&gt;No supports.&lt;/p&gt;
&lt;div class=article-info&gt;
Blink has tried to support &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=380436"&gt;shadow as a function&lt;/a&gt; as a similar feature.
That should have archived "a constructor call for a super class", however, we gave it up.
&lt;/div&gt;

&lt;h2 id="v1_6"&gt;v1&lt;/h2&gt;
&lt;p&gt;Child nodes of &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; can be used as &lt;em&gt;fallback contents&lt;/em&gt;.
A good analogy of this feature is "default value of function parameter" in a programming language.&lt;/p&gt;
&lt;p&gt;The following example is borrowed from &lt;a href="https://codereview.chromium.org/1530643003"&gt;Blink's CL&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top-level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;child1&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;slot2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- #host&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;slot1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fallback1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;slot2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fallback2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;slot3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;slot4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fallback3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Slot&lt;/th&gt;
&lt;th&gt;Assigned nodes&lt;/th&gt;
&lt;th&gt;Distributed nodes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;slot1&lt;/td&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;#fallback1, #child1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slot2&lt;/td&gt;
&lt;td&gt;#child1&lt;/td&gt;
&lt;td&gt;#child1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slot3&lt;/td&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;#fallback3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slot4&lt;/td&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;#fallback3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus, the flat tree will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fallback1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;child1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fallback3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="events-to-react-the-change-of-distributions"&gt;Events to react the change of distributions&lt;/h1&gt;
&lt;h2 id="v0_7"&gt;v0&lt;/h2&gt;
&lt;p&gt;No way.&lt;/p&gt;
&lt;h2 id="v1_7"&gt;v1&lt;/h2&gt;
&lt;p&gt;A v1 has a new kind of events, called &lt;code&gt;slotchange&lt;/code&gt;. If a slot's distributed nodes changes as a result of DOM mutations, &lt;code&gt;slotchange&lt;/code&gt; event will be fired at the end of a microtask.&lt;/p&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i1&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JavaScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;slot_i1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slotchange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fired&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;my_host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// slotchange event will be fired on slot, &amp;#39;&amp;lt;slot id=i1 name=s1&amp;gt;&amp;#39;, at the end of a micro task.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO(hayato): Explain this feature in-depth. For a while, see &lt;a href="https://github.com/w3c/webcomponents/issues/288"&gt;#issue 288&lt;/a&gt; for the context.&lt;/p&gt;
&lt;h1 id="styling-for-distributed-nodes"&gt;Styling for distributed nodes&lt;/h1&gt;
&lt;h2 id="v0_8"&gt;v0&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;::content selector&lt;/code&gt; pseudo elements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i1&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my-child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;content&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;#c1&lt;/code&gt; becomes red.&lt;/p&gt;
&lt;h2 id="v1_8"&gt;v1&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;::slotted (compound-selector)&lt;/code&gt; pseudo elements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c1&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;c2&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-child&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree: --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;i1&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;slotted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;#c1&lt;/code&gt; becomes red.&lt;/p&gt;
&lt;div class=article-info&gt;
While &lt;code&gt;::content&lt;/code&gt; can take any arbitrary selector, &lt;code&gt;::slotted&lt;/code&gt; can only take a
&lt;a href="https://drafts.csswg.org/selectors-4/#compound"&gt;compound selector&lt;/a&gt; (in the parenthesis).
The reason of this restriction is to make a selector style-engine friendly, in terms of performance.

In v0, it is difficult to avoid a performance penalty caused by an arbitrary selector which crosses shadow boundaries.
&lt;/div&gt;

&lt;h1 id="shadow-piercing-combinators"&gt;Shadow piercing combinators&lt;/h1&gt;
&lt;h2 id="v0_9"&gt;v0&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;/deep/&lt;/code&gt; (zero-or-more shadow boundary crossing) and &lt;code&gt;::shadow&lt;/code&gt; (one level shadow boundary crossing).&lt;/p&gt;
&lt;div class=article-danger&gt;
These selectors were already deprecated in Blink. Do not use that.
&lt;/div&gt;

&lt;h2 id="v1_9"&gt;v1&lt;/h2&gt;
&lt;p&gt;No alternative.&lt;/p&gt;
&lt;h1 id="css-cascading-order"&gt;CSS Cascading order&lt;/h1&gt;
&lt;h2 id="v0_10"&gt;v0&lt;/h2&gt;
&lt;p&gt;The spec has a bug and the implementation in Blink is broken. It's too late to fix it without breaking the Web.&lt;/p&gt;
&lt;h2 id="v1_10"&gt;v1&lt;/h2&gt;
&lt;p&gt;Clarified. In short: "A rule in an outer tree wins a rule in an inner tree".&lt;/p&gt;
&lt;div class=article-info&gt;
Because &lt;code&gt;/deep/&lt;/code&gt; and &lt;code&gt;::shadow&lt;/code&gt; are unavailable in v1, only &lt;code&gt;::slotted&lt;/code&gt; is affected by the new rule, as of now.
&lt;/div&gt;

&lt;p&gt;See &lt;a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Shadow-DOM-Cascade-Order-in-v1.md"&gt;this document&lt;/a&gt; for the example.&lt;/p&gt;
&lt;h1 id="sequential-focus-navigation"&gt;Sequential Focus Navigation&lt;/h1&gt;
&lt;h2 id="v0_11"&gt;v0&lt;/h2&gt;
&lt;p&gt;A document tree and a shadow tree are forming a &lt;em&gt;scope&lt;/em&gt; of sequential focus navigation.&lt;/p&gt;
&lt;h2 id="v1_11"&gt;v1&lt;/h2&gt;
&lt;p&gt;In addition to v0, &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; becomes a &lt;em&gt;scope&lt;/em&gt; of sequential focus navigation.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/w3c/webcomponents/issues/375#issuecomment-178989178"&gt;the comment&lt;/a&gt; in the spec issue
for an example.&lt;/p&gt;
&lt;p&gt;TODO(hayato): Explain the concept behind the scene and its behavior here.&lt;/p&gt;
&lt;h1 id="delegatesfocus"&gt;DelegatesFocus&lt;/h1&gt;
&lt;p&gt;TODO(hayato): Explain this.&lt;/p&gt;
&lt;h1 id="activeelement"&gt;ActiveElement&lt;/h1&gt;
&lt;p&gt;TODO(hayato): Explain the difference. For a while, see &lt;a href="https://github.com/w3c/webcomponents/issues/358"&gt;webcomponents #358&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="events-across-shadow-boundaries"&gt;Events across shadow boundaries&lt;/h1&gt;
&lt;h2 id="v0_12"&gt;v0&lt;/h2&gt;
&lt;p&gt;Events are propagating across shadow boundaries by default, except for a limited kinds of events.
See the &lt;a href="http://w3c.github.io/webcomponents/spec/shadow/#scoped-flag"&gt;list&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="v1_12"&gt;v1&lt;/h2&gt;
&lt;p&gt;Events are scoped in a tree by default, except for some of UA UIEvents.&lt;/p&gt;
&lt;p&gt;For user-made synthetic events, you can control the behavior by a &lt;code&gt;composed&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Top level HTML --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;my-host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;my-host&amp;gt;&amp;#39;s shadow tree --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JavaScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;my_host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-click1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-click1 is fired&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This will not be called.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;my_host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-click2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-click2 is fired&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// This will be called.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-click1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bubbles&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-click2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bubbles&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At &lt;code&gt;#my-host&lt;/code&gt;, only an event listener for &lt;code&gt;my-click2&lt;/code&gt; is called.&lt;/p&gt;
&lt;h1 id="getting-event-path"&gt;Getting Event path&lt;/h1&gt;
&lt;h2 id="v0_13"&gt;v0&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;Event.path&lt;/code&gt;, which is a &lt;em&gt;property&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="v1_13"&gt;v1&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;Event.composedPath()&lt;/code&gt;, which is a &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;
&lt;div class=article-info&gt;
There is a small difference between them.
After an event dispatching is done, &lt;code&gt;Event.composedPath()&lt;/code&gt; returns an empty array, while &lt;code&gt;Event.path&lt;/code&gt; does not.
&lt;/div&gt;

&lt;h1 id="functions-which-are-renamed"&gt;Functions which are renamed&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;V0&lt;/th&gt;
&lt;th&gt;V1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;insertionPoint.getDistributedNodes()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;slot.assignedNodes({flatten: true})&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No equivalence&lt;/td&gt;
&lt;td&gt;&lt;code&gt;slot.assignedNodes()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Element.getDestinationInsertionPoints()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Element.assignedSlot&lt;/code&gt; (The meaning is slightly different. It returns only the directly assigned slot.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="new-utility-functions-in-node"&gt;New utility functions in Node&lt;/h1&gt;
&lt;p&gt;These functions are just utility functions. Thus, v0 or v1 does not matter.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dom.spec.whatwg.org/#dom-node-isconnected"&gt;Node.isConnected&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Returns true if the node is &lt;a href="https://dom.spec.whatwg.org/#dom-node-isconnected"&gt;connected&lt;/a&gt;. &lt;em&gt;connected&lt;/em&gt; is relativey a new concept in the DOM Standard.
Roughly speaking, it extends the meaning of &lt;em&gt;in a document&lt;/em&gt; for the era of Shadow DOM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dom.spec.whatwg.org/#dom-node-getrootnode"&gt;Node.getRootNode(options)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Returns its root, or its &lt;a href="https://dom.spec.whatwg.org/#concept-shadow-including-root"&gt;shadow-including root&lt;/a&gt; (aka &lt;em&gt;super-root&lt;/em&gt;) if options's composed is true.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="questions"&gt;Questions?&lt;/h1&gt;
&lt;p&gt;If you find a typo, mistake or a question in this document, please file an issue &lt;a href="https://github.com/hayatoito/hayatoito.github.io/issues"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a question about the Web Standard itself, please see the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dom.spec.whatwg.org/"&gt;DOM Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://html.spec.whatwg.org/"&gt;HTML Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drafts.csswg.org/css-scoping/"&gt;CSS Scoping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://w3c.github.io/webcomponents/spec/shadow/"&gt;Shadow DOM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=article-info&gt;
We have been upstream-ing Shadow DOM specification into the DOM Standard, the HTML Standard, or the CSS Scoping.
The content of the Shadow DOM specification might not reflect the latest status.
See &lt;a href="https://github.com/w3c/webcomponents/issues/377"&gt;webcomponents #377&lt;/a&gt; for details.
&lt;/div&gt;</content></entry><entry><title>Simple timer application for the pomodoro technique</title><link href="https://hayato.io/2014/timer/" rel="alternate"></link><published>2014-02-02T00:00:00+09:00</published><updated>2014-02-02T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2014-02-02:/2014/timer/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; (2016-03-22 Tue): I have rewritten the timer application. This document is still using the old screen captures.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I've created a simple &lt;a href="/timer/"&gt;timer application&lt;/a&gt; for &lt;a href="http://pomodorotechnique.com/"&gt;the pomodoro technique&lt;/a&gt;.
You can use the timer here, &lt;a href="http://hayato.io/timer/"&gt;http://hayato.io/timer/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="timer" src="/assets/2014/timer.png"&gt;&lt;/p&gt;
&lt;p&gt;It seems that there are a lot of timer applications for the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; (2016-03-22 Tue): I have rewritten the timer application. This document is still using the old screen captures.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I've created a simple &lt;a href="/timer/"&gt;timer application&lt;/a&gt; for &lt;a href="http://pomodorotechnique.com/"&gt;the pomodoro technique&lt;/a&gt;.
You can use the timer here, &lt;a href="http://hayato.io/timer/"&gt;http://hayato.io/timer/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="timer" src="/assets/2014/timer.png"&gt;&lt;/p&gt;
&lt;p&gt;It seems that there are a lot of timer applications for the pomodoro technique, however, I couldn't find any timer which fits me.&lt;/p&gt;
&lt;p&gt;I need a simple, tiny, easy-to-customize, non-distractive and web-based timer. Therefore, I made it.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Modern browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="features"&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In addtion of the page, the title of the browser's tab also shows the progress.&lt;/p&gt;
&lt;p&gt;&lt;img alt="notification" src="/assets/2014/timer-title.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Desktop notifications with sounds (only if a browser supports).&lt;/p&gt;
&lt;p&gt;&lt;img alt="notification" src="/assets/2014/timer-notification.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specialized for the pomodoro technique. Pre-set timers are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;25&lt;/code&gt; min&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt; min (short break)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;25&lt;/code&gt; min&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt; min (short break)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;25&lt;/code&gt; min&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt; min (short break)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;25&lt;/code&gt; min&lt;/li&gt;
&lt;li&gt;&lt;code&gt;20&lt;/code&gt; min (long break)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="customize"&gt;Customize&lt;/h1&gt;
&lt;p&gt;You can customise the timer by URL's request parameters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;t&lt;/code&gt; - Comma separated timer periods.&lt;/p&gt;
&lt;p&gt;Example: &lt;a href="http://hayato.io/timer/?t=50,10,50,10"&gt;http://hayato.io/timer/?t=50,10,50,10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this case, timers are set to 50 min, 10 min, 50 min and 10 min.&lt;/p&gt;
&lt;p&gt;&lt;img alt="parameter-t" src="/assets/2014/timer-t.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mute&lt;/code&gt; -  Turn the notification off.&lt;/p&gt;
&lt;p&gt;Example: &lt;a href="http://hayato.io/timer/?mute=1"&gt;http://hayato.io/timer/?mute=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="parameter-mute" src="/assets/2014/timer-mute.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;autostart&lt;/code&gt; - Auto start the timer after the page is loaded.&lt;/p&gt;
&lt;p&gt;Example: &lt;a href="http://hayato.io/timer/?autostart=1"&gt;http://hayato.io/timer/?autostart=1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repeat&lt;/code&gt; - Repeat the timers.&lt;/p&gt;
&lt;p&gt;Example: &lt;a href="http://hayato.io/timer/?repeat=1"&gt;http://hayato.io/timer/?repeat=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="parameter-repeat" src="/assets/2014/timer-repeat.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;zen&lt;/code&gt; - Enable &lt;em&gt;zen&lt;/em&gt; mode. Try it. :)&lt;/p&gt;
&lt;p&gt;Example: &lt;a href="http://hayato.io/timer/?zen=1"&gt;http://hayato.io/timer/?zen=1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can mix the parameters freely, such as &lt;a href="http://hayato.io/timer/?t=50,10,50,10,50,30&amp;amp;autostart=1&amp;amp;repeat=1"&gt;http://hayato.io/timer/?t=50,10,50,10,50,30&amp;amp;autostart=1&amp;amp;repeat=1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="future-plan"&gt;Future Plan&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More customize.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sounds, Icons.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Googleの面接試験で出る （はずがない）「海賊と金貨」問題を空気を読まないでプログラムで解いてみる</title><link href="https://hayato.io/2014/pirates/" rel="alternate"></link><published>2014-01-05T00:00:00+09:00</published><updated>2014-01-05T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2014-01-05:/2014/pirates/</id><summary type="html">&lt;p&gt;2014年お正月。とある小学生に:&lt;/p&gt;
&lt;p&gt;小学生A: 「ねー、Google の面接試験で出るらしいこの問題、どうやって解くの？」&lt;/p&gt;
&lt;p&gt;と聞かれました。&lt;/p&gt;
&lt;p&gt;私: 「ほうほう、どんな問題？（あー、どうせまた "スクールバスにゴルフボールは何個入るでしょうか？" 的な問題かな。
そんな問題実際出るわけないんだけどなー。最近、よく出すのは "ゴルフボールにスクールバスを入れる方法" だからな！）」&lt;/p&gt;
&lt;p&gt;と、軽くかわそうと思いきや、小学生A から出されたのは以下の問題でした。「海賊と金貨」問題と呼ばれているらしいです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;17.&lt;/p&gt;
&lt;p&gt;5人の海賊がいて、彼らは1位から5位にまでランク分けされています。1位の海賊は100枚の金貨をどのように分けるかというプランを提案する権利があります。残りの海賊はこのプランに投票する権利があり、賛成が半分に満たない場合には1位の海賊は殺されます。1位の海賊の分け前を最大にしてなおかつ彼が生き残るにはどうすればいいですか？（ヒント：一人の海賊は結局、金貨の98％で終わる）&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;出典: &lt;a href="http://gigazine.net/news/20070909_google_job_interview/"&gt;Googleの面接試験、一体どのような質問をされるのか？&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:「意外にまともな問題だった。」&lt;/p&gt;
&lt;p&gt;小学生A:「ねー教えて。答えって本当にあるの？」&lt;/p&gt;
&lt;p&gt;小学生N:「ずっと考えていたんだけど、わかんなかったの。正月に聞こうと思ってた（わくわく …&lt;/p&gt;</summary><content type="html">&lt;p&gt;2014年お正月。とある小学生に:&lt;/p&gt;
&lt;p&gt;小学生A: 「ねー、Google の面接試験で出るらしいこの問題、どうやって解くの？」&lt;/p&gt;
&lt;p&gt;と聞かれました。&lt;/p&gt;
&lt;p&gt;私: 「ほうほう、どんな問題？（あー、どうせまた "スクールバスにゴルフボールは何個入るでしょうか？" 的な問題かな。
そんな問題実際出るわけないんだけどなー。最近、よく出すのは "ゴルフボールにスクールバスを入れる方法" だからな！）」&lt;/p&gt;
&lt;p&gt;と、軽くかわそうと思いきや、小学生A から出されたのは以下の問題でした。「海賊と金貨」問題と呼ばれているらしいです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;17.&lt;/p&gt;
&lt;p&gt;5人の海賊がいて、彼らは1位から5位にまでランク分けされています。1位の海賊は100枚の金貨をどのように分けるかというプランを提案する権利があります。残りの海賊はこのプランに投票する権利があり、賛成が半分に満たない場合には1位の海賊は殺されます。1位の海賊の分け前を最大にしてなおかつ彼が生き残るにはどうすればいいですか？（ヒント：一人の海賊は結局、金貨の98％で終わる）&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;出典: &lt;a href="http://gigazine.net/news/20070909_google_job_interview/"&gt;Googleの面接試験、一体どのような質問をされるのか？&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:「意外にまともな問題だった。」&lt;/p&gt;
&lt;p&gt;小学生A:「ねー教えて。答えって本当にあるの？」&lt;/p&gt;
&lt;p&gt;小学生N:「ずっと考えていたんだけど、わかんなかったの。正月に聞こうと思ってた（わくわく）」&lt;/p&gt;
&lt;p&gt;私: 「も、もちろん、解けるよー。ちょっと待ってなー。」&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;「大人なんだから、当然解けるよね？」的な眼差しで見つめられては、答えないわけにはいきません。
さて...。問題の設定が若干曖昧なので、まずは設定を補完しましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投票には、プランを提案する本人も含めて全員参加します。&lt;/li&gt;
&lt;li&gt;投票の結果、賛成票が投票数の半数に満たなければ、プランの提案者はその場で殺されてしまいます。&lt;/li&gt;
&lt;li&gt;ランク1位の海賊が殺されたら、次は残された4人で同じことを繰り返します。次にプランを提案するのは、ランク2位の海賊です。&lt;/li&gt;
&lt;li&gt;賛成票が半数以上になって分け前が決定するまで、この手続きは繰り返されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体例です。最初に、ランク1位の海賊が「おれと海賊3は50枚ずつ。他のひとにはあげないよ」というプランを提案するとします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirates1" src="/assets/2014/pirates1.png"&gt;&lt;/p&gt;
&lt;p&gt;それぞれプランに投票します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirates2" src="/assets/2014/pirates2.png"&gt;&lt;/p&gt;
&lt;p&gt;賛成票は2票。5人の半数以上である3票に満たなかったので、プランを提案した人は殺されてしまいます。&lt;/p&gt;
&lt;p&gt;残された4人で同じことを行います。次に提案する権利があるのは、ランク2位の海賊です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirates3" src="/assets/2014/pirates3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirates4" src="/assets/2014/pirates4.png"&gt;&lt;/p&gt;
&lt;p&gt;今度も賛成票は2票ですが、今回は4人の半数以上である２票ですので、プランは採用され、分け前が決定されます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirates5" src="/assets/2014/pirates5.png"&gt;&lt;/p&gt;
&lt;p&gt;結果は、&lt;i class="fa fa-user"&gt;&lt;/i&gt;海賊1 は死亡。&lt;i class="fa fa-user"&gt;&lt;/i&gt;海賊2は金貨70枚、&lt;i class="fa fa-user"&gt;&lt;/i&gt;海賊5は金貨30枚。&lt;i class="fa fa-user"&gt;&lt;/i&gt;海賊3と&lt;i class="fa fa-user"&gt;&lt;/i&gt;海賊4 は金貨0枚ですが、幸いなことに命だけは助かっています。&lt;/p&gt;
&lt;p&gt;さらに必要な設定として、それぞれの海賊は、以下のルールに従って行動するとします。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自分が生存することを最優先します。&lt;/li&gt;
&lt;li&gt;生存できる場合は、得られる金貨の枚数を最大限にしようとします。&lt;/li&gt;
&lt;li&gt;プランに賛成しても反対しても、自分が得られる金貨の枚数が結局同じになるならば、プランに反対します。&lt;/li&gt;
&lt;li&gt;プランを提案するとき、採用されるプランが複数あるとします。その際、自分が得られる金貨の枚数が同じであるプランが複数あるならば、できるだけランクが下位の海賊に金貨を多く分配するプランを選択します。つまり、他の条件が同じであるかぎり、ランク4位の海賊よりもランク5位の海賊に多く金貨が渡るようなプランを提案します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;つまり、海賊は&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(自分の命) &amp;gt;&amp;gt;&amp;gt; [超えられない壁] &amp;gt;&amp;gt;&amp;gt; (金貨) &amp;gt;&amp;gt;&amp;gt; [超えられない壁] &amp;gt;&amp;gt;&amp;gt; (ランクが上の海賊の不幸は蜜の味)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;という価値観に基いて行動します。...嫌なやつ。
海賊は、自分以外の他の海賊も同様に「嫌なやつ」であるということを、お互いに知っています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;私: 「これは、あれだね。帰納法的に考えればいいんだね。」&lt;/p&gt;
&lt;p&gt;小学生A: 「キノーホー？」&lt;/p&gt;
&lt;p&gt;私: 「（うっ...）つまり、まず海賊がひとりだけだった場合を考えてみると。
この場合は、自分が金貨100枚ぜんぶゲットして終了。次に海賊が2人の場合を考えてみると、自分が賛成票をいれれば相手が反対しても、賛成半数とれるから、自分100枚・相手0枚の &lt;code&gt;[100, 0]&lt;/code&gt; のプランで。次に海賊が3人の場合を考えてみると、えーと、必要な票数は2票だから、自分以外から1票取得できればいいわけで...。２人になったら、最後の人は一枚ももらえないから、最後の人に1枚だけあげれば、0枚よりはましだから、賛成してくれるはず。つまり、&lt;code&gt;[99, 0, 1]&lt;/code&gt; のプランで賛成2票とれる。次に4人の場合は....」&lt;/p&gt;
&lt;p&gt;小学生A: 「.... 」&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;私: 「... で、最後は、こうなるから、&lt;code&gt;[98, 0, 1, 0, 1]&lt;/code&gt; のプランがベストだね。ランク1位の海賊は &lt;code&gt;98&lt;/code&gt; 枚とれるな。」&lt;/p&gt;
&lt;p&gt;小学生A: 「....わかんないよ。ほんと？ 」&lt;/p&gt;
&lt;p&gt;私: 「うん、論理的に考えたら、そうなるはずだよ。」&lt;/p&gt;
&lt;p&gt;小学生A: 「ロンリテキ？たった1枚しかもらえないのに賛成するかなー？信じられないなー。」&lt;/p&gt;
&lt;p&gt;小学生N: 「うん。1枚はちょっと少ない気がする。」&lt;/p&gt;
&lt;p&gt;小学生A: 「98枚とか言ってきたら私絶対反対する！自己中すぎる！」&lt;/p&gt;
&lt;p&gt;小学生N: 「うん。98枚っていえちゃうところがすごいよね。すごい自信。」&lt;/p&gt;
&lt;p&gt;小学生A: 「私だったら少なくとも33枚もらわないと、イヤっていっちゃうかな。」&lt;/p&gt;
&lt;p&gt;小学生N: 「えー。私は20枚でおっけーだよ。」&lt;/p&gt;
&lt;p&gt;私: 「（きみたち、ぼくの話なんにもきいてないだろ）... 証明したる。」&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;もともとこの問題の意図するところは、頭の中だけで考えて答えを導き出すことだと思われます。
しかし、ここは &lt;strike&gt;生意気な&lt;/strike&gt; 好奇心あふれる小学生たちに大人力を見せつけたいところです。&lt;/p&gt;
&lt;p&gt;プログラミングの出番です。方針は簡単、可能なプランを全て生成します。そのなかから、ルールを満たす「ベスト」なプランをプログラムに選択させてみて、結果が頭の中で考えた結果と一致するかどうか確認してみることにしましょう。&lt;/p&gt;
&lt;p&gt;例えば、海賊が1人の場合は、可能なプランは &lt;code&gt;[100]&lt;/code&gt; とひとつだけです。&lt;/p&gt;
&lt;p&gt;海賊が2人の場合は、可能なプランは以下の101通りになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0, 100]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1, 99]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 98]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[3, 97]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[99, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[100, 0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このうち、プランの提案者にとってもっとも有利なものは、自分が100枚取得できる &lt;code&gt;[100, 0]&lt;/code&gt; です。プログラムは、海賊が二人の場合は、&lt;code&gt;[100, 0]&lt;/code&gt; を選択するはずです。&lt;/p&gt;
&lt;p&gt;次に海賊が三人の場合は、可能なプランはぐっと増えます &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0, 0, 100]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0, 1, 99]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1, 0, 99]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0, 2, 98]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1, 1, 98]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 0, 98]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[99, 0, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[98, 2, 0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[99, 1, 0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[100, 0, 0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプランの中から、賛成票を2票取得できるもののうち、一番よいプランは、&lt;code&gt;[99, 0, 1]&lt;/code&gt; になるはずです。プログラムがそれを選択してくれることを祈りましょう。以下、同様に、海賊の数が5人の場合まで繰り返します。&lt;/p&gt;
&lt;p&gt;では、実際にやってみましょう。ここでは、Python を使用します。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_proposal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_proposal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pirates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;optimal_proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pirates&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;best_coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;best_proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;optimal_proposal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_proposal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;optimal_proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;best_coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;best_coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;best_proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;best_proposal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;optimal_proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;best_proposal&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optimal_proposal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;実行します。海賊が5人,金貨が100枚の場合は以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ./pirates.py 5 100&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このプログラムは、これまでと異なり、プランを左右逆に出力することにご注意ください。つまり、一番右がランクの上位・一番先に提案する海賊の分け前を表し、一番左が最後の海賊の分け前を表します。&lt;/p&gt;
&lt;p&gt;結果、海賊が5人の場合の金貨の分配は、 &lt;code&gt;[1, 0, 1, 0, 98]&lt;/code&gt; となり、先ほど頭の中で解いた結果と一致します。
ランク1位の提案者が金貨を98枚、3番目と5番目の海賊が金貨が1枚、それ以外は0枚で決定します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;私: 「ダロ？一致しただろ？（ほっ）」&lt;/p&gt;
&lt;p&gt;小学生A: 「ほんとだー。ちょっと信じてあげれるかもー。」&lt;/p&gt;
&lt;p&gt;私: 「（ちょっとかよ...）」&lt;/p&gt;
&lt;p&gt;小学生A: 「このプログラム間違ってないよね？だまそうとしてない？」&lt;/p&gt;
&lt;p&gt;私: 「た、たぶん、あってると思うんだ..。」&lt;/p&gt;
&lt;p&gt;小学生N: 「ねえねえ。じゃあ、逆の場合は？海賊100人で金貨5枚だとどうなるの？」&lt;/p&gt;
&lt;p&gt;私: 「（おー良い質問ではないか。おぬし、きっと大物になりよるぞ。にやにや）試してみようか。」&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ./pirates.py 100 5&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="c"&gt;....&lt;/span&gt;
 &lt;span class="c"&gt;....&lt;/span&gt;
 &lt;span class="c"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;私: 「...」&lt;/p&gt;
&lt;p&gt;小学生A: 「...」&lt;/p&gt;
&lt;p&gt;小学生N: 「...」&lt;/p&gt;
&lt;p&gt;小学生A: 「遅いね...。」&lt;/p&gt;
&lt;p&gt;小学生N: 「うん。」&lt;/p&gt;
&lt;p&gt;小学生A: 「変なことしてパソコン壊したんじゃないの？」&lt;/p&gt;
&lt;p&gt;私: 「いや、このプログラム、やっつけ仕事だったから、時間がかかるの（たらーん）。あ、&lt;code&gt;-1&lt;/code&gt; はその海賊が殺されちゃうって意味だからね。」&lt;/p&gt;
&lt;p&gt;小学生A: 「マイナス？」&lt;/p&gt;
&lt;p&gt;私: 「（くっ...。）海賊が殺された時は、ばってん (&lt;code&gt;x&lt;/code&gt;) にするね。結果を見やすくするために、ちょっと出力の仕方変更するね。ちょっと待ってて...。」&lt;/p&gt;
&lt;p&gt;小学生N: 「うん。」&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;私: 「おっけー。海賊30人に減らして、もう一度やってみるね。」&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ./pirates.py 30 5&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;05&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0104&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10103&lt;/span&gt;
 &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010103&lt;/span&gt;
 &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1010102&lt;/span&gt;
 &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;01010102&lt;/span&gt;
 &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;101010101&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0101010101&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;
&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;xxxx&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;xxxxx&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;xxxxxx&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;010101010100000000&lt;/span&gt;&lt;span class="n"&gt;xxxxxxx&lt;/span&gt;
&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;&lt;span class="n"&gt;xxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;小学生N: 「海賊が30人のときは、４人死んじゃうの？」&lt;/p&gt;
&lt;p&gt;私: 「そうだね。最初の4人はどんなにがんばっても半数以上の賛成を得られるプランがつくれないんだね。」&lt;/p&gt;
&lt;p&gt;小学生N: 「かわいそう。」&lt;/p&gt;
&lt;p&gt;私: 「例えば、30人のときは賛成票を自分以外で14票とらないといけないんだけど、29人残った時のブランはえーと...」&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;私: 「...こうであることがわかっているので、どんなにうまく5枚の金貨を配分しても、14票集めることができないんだね。例えば、金貨の配分を」&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10101010100000000000000000&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;
    &lt;span class="mi"&gt;01010101010000000000000000000&lt;/span&gt; &lt;span class="o"&gt;(&amp;lt;-&lt;/span&gt; &lt;span class="err"&gt;金貨の配分&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;私: 「...としても、賛成してくれる人は、8人しかいないので、殺されちゃうんだなー。かわいそうだね。」&lt;/p&gt;
&lt;p&gt;小学生N: 「社会きびしいね。」&lt;/p&gt;
&lt;p&gt;私: 「（お、おう）... しかし、これ面白いな..。なるほど。」&lt;/p&gt;
&lt;p&gt;小学生A: 「(突然) え、面白い？なになに？」&lt;/p&gt;
&lt;p&gt;私: 「（きみ今アイカツ見てただろ...）いあ、パターンがあって...。いや何でもないです。これ、一般解 &lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt; とか求められそうだな。うん。」&lt;/p&gt;
&lt;p&gt;小学生A: 「パソコンってもっと早いのかと思ったけど、遅いんだー。海賊100人で金貨1万枚を奪い合う戦いを見たかったなー。」&lt;/p&gt;
&lt;p&gt;私: 「（アイカツでも見てなさい...）ごめんなさい。パソコンは悪くない、僕が悪いんです...。早くしようと思えばできるんだけど...。」&lt;/p&gt;
&lt;p&gt;小学生N: 「早くできるの？私もみてみたいなー。」&lt;/p&gt;
&lt;p&gt;私: 「うん、プランを全通り生成しているところはもっと早くできるよ &lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;。でも、それよりはちゃんと論理的に解くのが一番だと思う。ちょっと待っててね。」&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先ほど頭の中で解いた方法を今度はプログラムで再現してみましょう。以下のようになります。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pirates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;necessary_vote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;ranks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;necessary_coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ranks&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;necessary_vote&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;necessary_coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ranks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;necessary_vote&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proposal&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;necessary_coin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;proposal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pretty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;optimal_proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_pirates&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;optimal_proposal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optimal_proposal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{:4}&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pretty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;optimal_proposal&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;こちらだと、海賊100人、金貨1万枚の場合も時間をかけないで解くことが可能です。&lt;/p&gt;
&lt;p&gt;例として、海賊100人、金貨20枚の場合の結果は以下のようになります。
（見やすくするため、金貨が10枚以上のときは &lt;code&gt;G&lt;/code&gt; にしています。）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  1: G
  2: 0G
  3: 10G
  4: 010G
  5: 1010G
  6: 01010G
  7: 101010G
  8: 0101010G
  9: 10101010G
 10: 010101010G
 11: 1010101010G
 12: 01010101010G
 13: 101010101010G
 14: 0101010101010G
 15: 10101010101010G
 16: 010101010101010G
 17: 1010101010101010G
 18: 01010101010101010G
 19: 101010101010101010G
 20: 0101010101010101010G
 21: 10101010101010101010G
 22: 010101010101010101010G
 23: 10101010101010101010109
 24: 010101010101010101010109
 25: 1010101010101010101010108
 26: 01010101010101010101010108
 27: 101010101010101010101010107
 28: 0101010101010101010101010107
 29: 10101010101010101010101010106
 30: 010101010101010101010101010106
 31: 1010101010101010101010101010105
 32: 01010101010101010101010101010105
 33: 101010101010101010101010101010104
 34: 0101010101010101010101010101010104
 35: 10101010101010101010101010101010103
 36: 010101010101010101010101010101010103
 37: 1010101010101010101010101010101010102
 38: 01010101010101010101010101010101010102
 39: 101010101010101010101010101010101010101
 40: 0101010101010101010101010101010101010101
 41: 10101010101010101010101010101010101010100
 42: 010101010101010101010101010101010101010100
 43: 010101010101010101010101010101010101010100x
 44: 10101010101010101010101010101010101010100000
 45: 10101010101010101010101010101010101010100000x
 46: 10101010101010101010101010101010101010100000xx
 47: 10101010101010101010101010101010101010100000xxx
 48: 010101010101010101010101010101010101010100000000
 49: 010101010101010101010101010101010101010100000000x
 50: 010101010101010101010101010101010101010100000000xx
 51: 010101010101010101010101010101010101010100000000xxx
 52: 010101010101010101010101010101010101010100000000xxxx
 53: 010101010101010101010101010101010101010100000000xxxxx
 54: 010101010101010101010101010101010101010100000000xxxxxx
 55: 010101010101010101010101010101010101010100000000xxxxxxx
 56: 10101010101010101010101010101010101010100000000000000000
 57: 10101010101010101010101010101010101010100000000000000000x
 58: 10101010101010101010101010101010101010100000000000000000xx
 59: 10101010101010101010101010101010101010100000000000000000xxx
 60: 10101010101010101010101010101010101010100000000000000000xxxx
 61: 10101010101010101010101010101010101010100000000000000000xxxxx
 62: 10101010101010101010101010101010101010100000000000000000xxxxxx
 63: 10101010101010101010101010101010101010100000000000000000xxxxxxx
 64: 10101010101010101010101010101010101010100000000000000000xxxxxxxx
 65: 10101010101010101010101010101010101010100000000000000000xxxxxxxxx
 66: 10101010101010101010101010101010101010100000000000000000xxxxxxxxxx
 67: 10101010101010101010101010101010101010100000000000000000xxxxxxxxxxx
 68: 10101010101010101010101010101010101010100000000000000000xxxxxxxxxxxx
 69: 10101010101010101010101010101010101010100000000000000000xxxxxxxxxxxxx
 70: 10101010101010101010101010101010101010100000000000000000xxxxxxxxxxxxxx
 71: 10101010101010101010101010101010101010100000000000000000xxxxxxxxxxxxxxx
 72: 010101010101010101010101010101010101010100000000000000000000000000000000
 73: 010101010101010101010101010101010101010100000000000000000000000000000000x
 74: 010101010101010101010101010101010101010100000000000000000000000000000000xx
 75: 010101010101010101010101010101010101010100000000000000000000000000000000xxx
 76: 010101010101010101010101010101010101010100000000000000000000000000000000xxxx
 77: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxx
 78: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxx
 79: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxx
 80: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxx
 81: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxx
 82: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxx
 83: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxx
 84: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxx
 85: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxx
 86: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxx
 87: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxx
 88: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxx
 89: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxx
 90: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxx
 91: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxx
 92: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxx
 93: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxx
 94: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxx
 95: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxx
 96: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxx
 97: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxx
 98: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxx
 99: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxx
100: 010101010101010101010101010101010101010100000000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;小学生A: 「海賊がいっぱいいて、金貨の枚数がちょっとだったら、人がいっぱい死んじゃうだね。納得。」&lt;/p&gt;
&lt;p&gt;私: 「（納得していいのか...) 試しに両方のプログラムの結果を比較してみるとだ...。うん、同じだな。」&lt;/p&gt;
&lt;p&gt;小学生N: 「どういうこと？」&lt;/p&gt;
&lt;p&gt;私: 「最初に紙と鉛筆で説明したでしょ。あの考え方間違ってなかったってことかな？」&lt;/p&gt;
&lt;p&gt;小学生N: 「うん。不思議だったけどあっていたんだね。」&lt;/p&gt;
&lt;p&gt;私: 「うん。よかった（ほっ）」&lt;/p&gt;
&lt;p&gt;小学生A: 「なんだ、やっぱり自信なかったんだ。」&lt;/p&gt;
&lt;p&gt;私: 「（くっ。）」&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;(小学生A と 小学生N、何やら2人で相談しはじめる)&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;小学生A: 「...ところで。」&lt;/p&gt;
&lt;p&gt;私: 「なに？」&lt;/p&gt;
&lt;p&gt;小学生A: 「お年玉は何枚くれるの？」&lt;/p&gt;
&lt;p&gt;小学生N: 「枚数が少なかったら反対しちゃうぞ♡」&lt;/p&gt;
&lt;p&gt;私: 「(ちょ。ぼく、ころさないでよ) ... 」&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;海賊3人の場合は、&lt;code&gt;Combination(102, 2) = 5,151&lt;/code&gt; 通りです。4人の場合は、&lt;code&gt;Combination(103, 3) = 176,851&lt;/code&gt; 通り、5人の場合は、&lt;code&gt;Combination(104, 4) = 4,598,126&lt;/code&gt; 通りです。&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;海賊の人数を &lt;code&gt;n&lt;/code&gt;, 自分のランクを &lt;code&gt;i&lt;/code&gt;, 金貨の枚数を &lt;code&gt;c&lt;/code&gt; とした場合、得られる金貨の枚数の一般解 &lt;code&gt;f(n, i, c)&lt;/code&gt; を式で表すことが可能です。&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Branch_and_bound"&gt;Branch and bound&lt;/a&gt; すること（枝刈り) で大幅に生成されるプランの数を減らすことが可能です。&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content></entry><entry><title>hayato.io (4topcoder)</title><link href="https://hayato.io/2014/hayato.io/" rel="alternate"></link><published>2014-01-04T00:00:00+09:00</published><updated>2014-01-04T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2014-01-04:/2014/hayato.io/</id><summary type="html">&lt;p&gt;&lt;a href="http://hayato.io"&gt;hayato.io&lt;/a&gt; にコンテンツを集約させていきますね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://4topcoder.blogspot.com"&gt;4topcoder&lt;/a&gt; のコンテンツはすべて &lt;a href="http://hayato.io/archives/"&gt;hayato.io/archives/&lt;/a&gt; にリダイレクトされます。
  Feed もリダイレクトされます。&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://hayato.io"&gt;hayato.io&lt;/a&gt; にコンテンツを集約させていきますね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://4topcoder.blogspot.com"&gt;4topcoder&lt;/a&gt; のコンテンツはすべて &lt;a href="http://hayato.io/archives/"&gt;hayato.io/archives/&lt;/a&gt; にリダイレクトされます。
  Feed もリダイレクトされます。&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>SRM432</title><link href="https://hayato.io/2009/srm432/" rel="alternate"></link><published>2009-01-07T00:00:00+09:00</published><updated>2009-01-07T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2009-01-07:/2009/srm432/</id><summary type="html">&lt;p&gt;SRM432に挑戦。前回から6ヶ月以上たってるよ。
6ヶ月以上、参戦してないと、ランキングから除外されるんですねー。&lt;/p&gt;
&lt;p&gt;今までは、ThinkPad + Linux (もち、Gentoo Linux) + Eclipse + Javaという環境でやってたんですが、ThinkPadが壊れてからは、なかなか環境を整えることをしないまま、時間がたってしまいました。&lt;/p&gt;
&lt;p&gt;今回は、Macbook Pro + Eclipse + Javaという環境で、久しぶりに参戦してみました。
レーティングが下がるフラグがたちまくりの状態だったんですが、 結果は、250 Passed, 500 Passed, 4 successful challengesで、レーティングは2121 -&amp;gt; 2220と上昇。ようやくRedになりました。&lt;/p&gt;</summary><content type="html">&lt;p&gt;SRM432に挑戦。前回から6ヶ月以上たってるよ。
6ヶ月以上、参戦してないと、ランキングから除外されるんですねー。&lt;/p&gt;
&lt;p&gt;今までは、ThinkPad + Linux (もち、Gentoo Linux) + Eclipse + Javaという環境でやってたんですが、ThinkPadが壊れてからは、なかなか環境を整えることをしないまま、時間がたってしまいました。&lt;/p&gt;
&lt;p&gt;今回は、Macbook Pro + Eclipse + Javaという環境で、久しぶりに参戦してみました。
レーティングが下がるフラグがたちまくりの状態だったんですが、 結果は、250 Passed, 500 Passed, 4 successful challengesで、レーティングは2121 -&amp;gt; 2220と上昇。ようやくRedになりました。&lt;/p&gt;</content></entry><entry><title>SRM405</title><link href="https://hayato.io/2008/srm405/" rel="alternate"></link><published>2008-06-15T00:00:00+09:00</published><updated>2008-06-15T00:00:00+09:00</updated><author><name>Hayato Ito</name></author><id>tag:hayato.io,2008-06-15:/2008/srm405/</id><summary type="html">&lt;p&gt;久しぶりのSRM。実に5ヶ月ぶりですよ。
C++にスイッチするはずが、手元の環境の問題で、やむなくJavaで参加してみる。&lt;/p&gt;
&lt;p&gt;250はやるだけの問題。 500はいい解法がなかなか思いつかないまま、時間がなくなってきたので
 エレガントな解法はもうあきらめてBrute-force的に解いてみる。
コンテスト中は解法として正しいかどうか証明できなかったので、自信がなかったんですけど、Passしました。
ちょっと驚き。&lt;/p&gt;
&lt;p&gt;レーティングは、2000 -&amp;gt; 2121と上昇。 賞金つきマッチでしたので、おそらく賞金ももらえます&lt;/p&gt;</summary><content type="html">&lt;p&gt;久しぶりのSRM。実に5ヶ月ぶりですよ。
C++にスイッチするはずが、手元の環境の問題で、やむなくJavaで参加してみる。&lt;/p&gt;
&lt;p&gt;250はやるだけの問題。 500はいい解法がなかなか思いつかないまま、時間がなくなってきたので
 エレガントな解法はもうあきらめてBrute-force的に解いてみる。
コンテスト中は解法として正しいかどうか証明できなかったので、自信がなかったんですけど、Passしました。
ちょっと驚き。&lt;/p&gt;
&lt;p&gt;レーティングは、2000 -&amp;gt; 2121と上昇。 賞金つきマッチでしたので、おそらく賞金ももらえます&lt;/p&gt;</content></entry></feed>